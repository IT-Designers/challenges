@using System.Net.Http.Json
@using SubmissionEvaluation.Client.Services
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Client.Shared.Components.NavMenu

@inject HttpClient HttpClient
@inject LoginService LoginService
@inject NavigationManager NavigationManager
@inject MaintenanceService MaintenanceService

<!-- navbar -->
<nav class="navbar navbar-inverse navbar-expand" style="padding: 0px">
    <div class="container">
        @if (UserSettings != null)
        {
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="d-none d-xl-block">
                <a class="navbar-brand my-auto" href="/Tasks">Challenges</a>
                <p class="navbar-text my-auto">Die Programmierplattform</p>
            </div>

            @if (IsMaintenanceMode)
            {
                <div>
                    <p class="navbar-text my-auto" style="color: orangered">Wartungsmodus aktiv</p>
                </div>
            }

            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="navbar-collapse navbar-collapse">
                <ul class="navbar-nav ml-auto">

                    @if (IsLoggedin)
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/Tasks" Match=NavLinkMatch.All>
                                <span class="oi oi-home"></span> Aufgaben
                            </NavLink>
                        </li>

                        @if (features.EnableRating || PermissionHelper.CheckPermissions(Actions.View, "Members", Permissions))
                        {
                            <li class="nav-item">
                                <NavLink class="nav-link" href="Members/List">
                                    <span class="oi oi-bar-chart"></span> Mitglieder
                                </NavLink>
                            </li>
                        }

                        @if (features.EnableReview && PermissionHelper.CheckPermissions(Actions.View, "Review", Permissions))
                        {
                            <li class="nav-item">
                                <NavLink class="nav-link" href="Review/Overview">
                                    <span class="oi oi-person"></span> Reviews
                                </NavLink>
                            </li>
                        }

                        <li class="nav-item">
                            <NavLink class="nav-link" href="Help/ViewPage">
                                <span class="oi oi-question-mark"></span> Hilfe
                            </NavLink>
                        </li>

                        <li class="nav-item d-none d-md-block">
                            <div style="position: relative" class="nav-link">
                                <input type="text" class="form-control" id="searchBar" placeholder="Search..." @onkeyup="FetchSearchResults" @bind-value="SearchInput" @bind-value:event="oninput"/>
                                <ul id="searchResults" class="dropdown-menu" style=@($"display: {(Results.Count == 0 ? "none" : "block")}")>
                                    @foreach (var result in Results)
                                    {
                                        <li class="dropdown-item">
                                            <button class="fake-link no-styling" @onclick="e => ResetSearchResultsAndNavigate(result.Url)">@result.Text</button>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </li>

                        <li class="dropdown nav-item @profile.NavItem">
                            <button class="dropdown-toggle navdroptext nav-link" type="button" id="ProfileMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="@profile.Expanded" @onclick="profile.ShowOrHide">
                                <span class="oi oi-person"></span> Profil <span class="caret"></span>
                            </button>
                            <div class="dropdown-menu @profile.NavItem" aria-labelledby="ProfileMenuButton">
                                @{
                                    if (IsLoggedin)
                                    {
                                        <LogoutMenu UserSettings="@UserSettings" ParentAction="() => {profile.ShowOrHide(); StateHasChanged(); }"/>
                                    }
                                    else
                                    {
                                        <LoginMenu ParentAction="() => {profile.ShowOrHide(); StateHasChanged(); }"/>
                                    }
                                }
                            </div>
                        </li>

                        @if (SeesAdminMenu)
                        {
                            <li class="dropdown nav-item @administration.NavItem">
                                <button class="dropdown-toggle navdroptext nav-link" type="button" id="AdminMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="@administration.Expanded" @onclick="administration.ShowOrHide">
                                    <span class="oi oi-wrench"></span> Verwalten <span class="caret"></span>
                                </button>
                                <div class="dropdown-menu @administration.NavItem" aria-labelledby="AdminMenuButton">
                                    <AdminMenu Permissions="Permissions" ParentAction="() => {administration.ShowOrHide(); StateHasChanged(); }"/>
                                </div>
                            </li>
                        }

                        @* todo> update layout & links
                        @if (isLoggedin)
                        {
                            <Notification navItem="@Notifications.navItem" expanded="@Notifications.expanded" />
                        }*@
                    }

                    <li class="nav-item d-none d-sm-block">
                        <a href="https://karriere.it-designers.de/#itdesigners">
                            <img class="hidden-xs" src="images/logo.jpg" style="width: 104px"/>
                        </a>
                    </li>
                </ul>
            </div>
        }
    </div>
</nav>

@code {

    SettingsModel UserSettings { get; set; }
    Permissions Permissions { get; set; }
    bool SeesAdminMenu { get; set; }
    bool IsLoggedin => UserSettings.Name != "" && UserSettings.Name != null;
    bool collapseNavMenu = true;
    Menu profile = new Menu();
    Menu administration = new Menu();
    Menu notifications = new Menu();
    FeatureSettings features = new FeatureSettings();
    List<SearchResult> Results { get; set; } = new List<SearchResult>();
    string SearchInput { get; set; } = string.Empty;
    bool IsMaintenanceMode { get; set; }

    protected override void OnInitialized()
    {
        LoginService.OnLoginChange += UpdateUserSettingsAndPermissions;
        MaintenanceService.OnMaintenanceChange += UpdateCurrentMaintenanceState;
        UpdateUserSettingsAndPermissions();
        UpdateCurrentMaintenanceState();
    }

    void ResetSearchResultsAndNavigate(string url)
    {
        Results = new List<SearchResult>();
        SearchInput = string.Empty;
        NavigationManager.NavigateTo(url, true);
    }

    private async void UpdateUserSettingsAndPermissions()
    {
        UserSettings = await HttpClient.GetFromJsonAsync<SettingsModel>("api/Account/getusersettings");
        Permissions = await HttpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        var viewPermissions = Permissions.ViewPermissions;
        SeesAdminMenu = Permissions.IsAdmin || viewPermissions.Contains("Users") || viewPermissions.Contains("Challenges") || viewPermissions.Contains("Bundles") || viewPermissions.Contains("Groups");
        if (UserSettings.Roles == null)
        {
            UserSettings.Roles = new List<string>();
        }
        features = await HttpClient.GetFromJsonAsync<FeatureSettings>("api/Account/getSettings");
        StateHasChanged();
    }

    private async void UpdateCurrentMaintenanceState()
    {
        IsMaintenanceMode = await HttpClient.GetFromJsonAsync<bool>("api/Home/IsMaintenanceMode");
        StateHasChanged();
    }

    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    async void FetchSearchResults()
    {
        var input = SearchInput.ToLower();
        if (!(input == null || input.Length < 2))
        {
            Results = await HttpClient.GetFromJsonAsync<List<SearchResult>>($"api/Search/Results/{input}");
            StateHasChanged();
        }
        else
        {
            Results = new List<SearchResult>();
            StateHasChanged();
        }
    }

    private class Menu
    {
        public string NavItem { get; set; } = "";
        public bool Expanded { get; set; } = false;

        public void ShowOrHide()
        {
            if (Expanded)
            {
                NavItem = "";
                Expanded = false;
            }
            else
            {
                NavItem = "show";
                Expanded = true;
            }
        }
    }

}
