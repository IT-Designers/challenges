@using SubmissionEvaluation.Shared.Classes
@using Blazored.TextEditor

@inject IJSRuntime JsRuntime

<style>
    .preview {
        box-sizing: border-box;
        height: 100%;
        line-height: 1.42;
        outline: none;
        overflow-y: auto;
        padding: 12px 15px;
        position: absolute;
        right: 0px;
        text-align: left;
        top: 5.5em;
        white-space: pre-wrap;
        word-wrap: break-word;
    }

    .preview.fullscreen {
        bottom: 0;
        height: 100% !important;
        margin-left: auto;
        position: fixed;
        right: 0;
        top: 50px;
        z-index: 9;
    }
</style>

<BlazoredTextEditor @ref="@QuillHtml">
        <ToolbarContent>
        <select class="ql-header">
            <option selected=""></option>
            <option value="1"></option>
            <option value="2"></option>
            <option value="3"></option>
            <option value="4"></option>
            <option value="5"></option>
        </select>
        <span class="ql-formats">
            <button class="ql-bold"></button>
            <button class="ql-italic"></button>
            <button class="ql-underline"></button>
            <button class="ql-strike"></button>
        </span>
        <span class="ql-formats">
            <select class="ql-color"></select>
            <select class="ql-background"></select>
        </span>
        <span class="ql-formats">
            <button class="ql-list" value="ordered"></button>
            <button class="ql-list" value="bullet"></button>
        </span>
        <span class="ql-formats">
            <button class="ql-link"></button>
        </span>
    </ToolbarContent>
    <EditorContent>
        @((MarkupString) EditorContent)
    </EditorContent>
</BlazoredTextEditor>

@code {

    [Parameter]
    public string EditorContent { get; set; }

    BlazoredTextEditor QuillHtml;

    private bool Preview { get; set; } = false;
    private bool FullScreen { get; set; }
    private string PreviewContent { get; set; }

    protected void SwitchFullscreen()
    {
        FullScreen = !FullScreen;
        StateHasChanged();
    }

    protected async void ConvertMarkdownToHtml()
    {
        Preview = !Preview;
        if (Preview)
        {
            UpdatePreview();
            await JsRuntime.InvokeVoidAsync("QuillFunctions.activatePreviewUpdate", DotNetObjectReference.Create(this));
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("QuillFunctions.deactivatePreviewUpdate", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable("UpdatePreview")]
    public async void UpdatePreview()
    {
        PreviewContent = MarkdownToHtml.Convert(await GetHtml());
        StateHasChanged();
    }

    public async Task<string> GetHtml()
    {
        return await this.QuillHtml.GetHTML();
    }
}
