@using SubmissionEvaluation.Client.Services
@using SubmissionEvaluation.Contracts.Data.Review
@using BlazorMonaco

@inject IJSRuntime Runtime
@inject ReviewSynchronizer Synchronizer
@if (Editor != null && AllComments != null)
{
    <div class="comments border">
        @foreach (var comment in Synchronizer.CurrentAssociation.Comments.Comments)
        {
            <div class="comment row" style="margin-right: 0px" @onmouseover="() => HoverIn(comment.Selections)" @onmouseover:stopPropagation="true" @onmouseout="HoverOut" @onmouseout:stopPropagation="true">
                <p style="color: white">@comment.Title</p>
                @if (!IsReadOnly)
                {
                    <a @onclick="() => DeleteComment(comment)" class="btn btn-danger col-3">X</a>
                }
                <textarea @bind="@comment.Text" readonly="@IsReadOnly"></textarea>
            </div>
        }
    </div>
}


@code {

    [Parameter]
    public bool IsReadOnly { get; set; }

    [Parameter]
    public MonacoEditor Editor { get; set; }

    [Parameter]
    public HashSet<ReviewComments> AllComments { get; set; }

    private string[] decorations = new string[1]{""};

    async void HoverIn(List<ReviewComments.Selection> selections)
    {
        var editor_sel = new ModelDeltaDecoration[selections.Count];

        int count = 0;
        foreach (var item in selections)
        {
            editor_sel[count++] = new ModelDeltaDecoration{
                Range = new BlazorMonaco.Range{StartColumn = item.start_col, StartLineNumber = item.start_row, EndLineNumber = item.end_row, EndColumn = item.end_col},
                Options = new ModelDecorationOptions{InlineClassName = "myInlineDecoration"}
            };
        }
        decorations = await Editor.DeltaDecorations(decorations, editor_sel);
    }

    async void HoverOut()
    {
        decorations = await Editor.DeltaDecorations(decorations, new ModelDeltaDecoration[1]{ new ModelDeltaDecoration{
                Range = new BlazorMonaco.Range{StartColumn = 1, StartLineNumber = 1, EndLineNumber = 1, EndColumn = 1},
                Options = new ModelDecorationOptions{InlineClassName = ""}
            }});
    }

    void DeleteComment(ReviewComments comment)
    {
        Synchronizer.CurrentAssociation.Comments.Comments.Remove(comment);
        Runtime.InvokeVoidAsync("removeVisualMarker");
        AllComments.Remove(comment);
        Synchronizer.InvokeEvent();
    }

}
