@using SubmissionEvaluation.Client.Services
@using SubmissionEvaluation.Contracts.Data.Review
@inject IToastService ToastService
@inject ReviewSynchronizer Synchronizer
<div class="fullscreen-hidden">
    @if (CurrentQuestion != null)
    {
        <div class="row">
            <div class="col-3">
                @if (!CurrentQuestion.Equals(GuidedQuestions[0]))
                {
                    <button class="btn btn-outline-dark" @onclick="PreviousQuestion">Vorherige Frage</button>
                }
            </div>
            <div class="col-3 d-flex flex-row-reverse ml-auto">
                <button class="btn btn-outline-dark pull-right" @onclick="NextQuestion">N채chste Frage</button>
            </div>
            <div class="guidedQuestion col-12">
                <div class="form-group ">
                    <div class="input-group-prepend">
                        <label class="font-weight-bold" for="inputGroupSelect01">@CurrentQuestion.Question</label>
                    </div>
                    <div class="switch-field">
                        @foreach (var kvp in GuidedQuestion.RatingToDescription)
                        {
                            <button class=@(CurrentQuestion.Rating != null && CurrentQuestion.Rating == kvp.Key ? "review-selected" : "") value="@kvp.Key" @onclick="e => SetRatingForCurrentQuestion(kvp.Key)">@((MarkupString) ShortenTitle(kvp.Value))</button>
                        }
                    </div>
                </div>
                <table class="table">
                    <tbody>
                    @foreach (var issue in CurrentQuestion?.Issues)
                    {
                        <tr class=@(CurrentIssue != null && CurrentIssue.Equals(issue) ? "questionnaire.currentIssue bg-warning" : "") @onclick="(() => ChangeCurrentIssue(issue))">
                            <td>@issue.Text</td><td class="issueCount">@CalculateIssueCount(issue)</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>
<div class="row">
    @if (CurrentQuestion == null)
    {
        <div id="guidedQuestionEnd">
            <div class="col-sm-9 col-12">
                <h3>Der Fragebogen wurde ausgef체llt. Sende das Review ab.</h3>
            </div>
            <div class="col-sm-3 col-12 pull-right">
                <button type="button" class="btn btn-outline-dark btn-block" @onclick="@InvokeParentSubmit">Review einreichen</button>
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public GuidedQuestion[] GuidedQuestions { get; set; }

    [Parameter]
    public Action SubmitReview { get; set; }

    GuidedQuestion CurrentQuestion { get; set; }

    [Parameter]
    public Issue CurrentIssue { get; set; }

    [Parameter]
    public EventCallback<Issue> CurrentIssueChanged { get; set; }

    [Parameter]
    public HashSet<ReviewComments> AllComments { get; set; } = new HashSet<ReviewComments>();

    protected override void OnInitialized()
    {
        CurrentQuestion = GuidedQuestions.ToList().Where(x => x.Rating == null).FirstOrDefault();
        Synchronizer.SomeDataChanged += StateHasChanged;
    }

    void InvokeParentSubmit()
    {
        SubmitReview?.Invoke();
    }

    void PreviousQuestion()
    {
        if (!CanChangeQuestion())
        {
            return;
        }
        for (var i = 0; i < GuidedQuestions.Length; i++)
        {
            if (GuidedQuestions[i].Equals(CurrentQuestion))
            {
                if (i != 0)
                {
                    CurrentQuestion = GuidedQuestions[i - 1];
                }
                else
                {
                    ToastService.ShowError("Keine vorherige Frage.", "Error");
                    return;
                }
            }
        }
        StateHasChanged();
    }

    void NextQuestion()
    {
        if (!CanChangeQuestion())
        {
            return;
        } //2 stands for "Current submission should be improved", so it quits the reviewing.
        if (CurrentQuestion.Rating != null && CurrentQuestion.Rating == GuidedQuestion.SubmissionShouldBeImproved)
        {
            EndQuestions();
            return;
        }
    //Take next
        for (var i = 0; i < GuidedQuestions.Length; i++)
        {
            if (CurrentQuestion.Id.Equals(GuidedQuestions[i].Id))
            {
                if (i < GuidedQuestions.Length - 1)
                {
                    CurrentQuestion = GuidedQuestions[i + 1];
                    CurrentIssue = null;
                    return;
                }
                EndQuestions();
            }
        }
        StateHasChanged();
    }

    bool CanChangeQuestion()
    {
        if (AnyCommentsEmpty())
        {
            ToastService.ShowWarning("Nicht alle Kommentare ausgef체llt", "Warning");
            return false;
        }
        if (CurrentQuestion.Rating == null)
        {
            ToastService.ShowWarning("Bitte w채hle eine Bewertung", "Warning");
            return false;
        }
        var issueCount = CurrentQuestion.Issues.Select(x => CalculateIssueCount(x)).Aggregate(0, (total, currentValue) => total + currentValue);
        if ((CurrentQuestion.Rating == GuidedQuestion.MinimalProblems || CurrentQuestion.Rating == GuidedQuestion.SubmissionShouldBeImproved) && issueCount < 1)
        {
            ToastService.ShowWarning("Bitte markiere mindestens ein Problem", "Warning");
            return false;
        }
        if (CurrentQuestion.Rating == GuidedQuestion.NoProblems && issueCount > 0)
        {
            ToastService.ShowWarning("Problem vorhanden, bitte passe die Bewertung an", "Warning");
            return false;
        }
        return true;
    }

    bool AnyCommentsEmpty()
    {
        if (AllComments == null || AllComments.Count == 0)
            return false;

        return AllComments.Any(element =>
        {
            var text = element.Text;
            if (text == null || text.Length == 0)
            {
                return true;
            }
            return false;
        });
    }

    void EndQuestions()
    {
        CurrentQuestion = null;
    }

    string ShortenTitle(string title)
    {
        var substrings = title.Split('(');
        if (substrings.Length > 1)
        {
            return substrings[0] + "<br/><small>" + substrings[1].Replace(")", "</small>");
        }
        return title;
    }

    void SetRatingForCurrentQuestion(int value)
    {
        CurrentQuestion.Rating = value;
        StateHasChanged();
    }

    int CalculateIssueCount(Issue issue)
    {
        try
        {
            var issueCount = AllComments.Where(x => x.AssignedIssue != null && x.AssignedIssue == issue.Id).Count();
            issue.IssueCount = issueCount;
            return issueCount;
        }
        catch (NullReferenceException)
        {
            return 0;
        }
    }

    void ChangeCurrentIssue(Issue issue)
    {
        CurrentIssue = issue;
        Synchronizer.CurrentIssueId = issue.Id;
        Synchronizer.CurrentIssueTitle = issue.Text;
        CurrentIssueChanged.InvokeAsync(issue);
        StateHasChanged();
    }

}
