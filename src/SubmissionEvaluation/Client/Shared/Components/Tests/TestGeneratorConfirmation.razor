@using SubmissionEvaluation.Client.Services
@using SubmissionEvaluation.Shared.Models.Shared
@using Member = SubmissionEvaluation.Contracts.ClientPocos.Member
@using System.Net.Http.Json
@inject FileExplorerDomain domain
@inject NavigationManager navi
@inject HttpClient httpClient
<div hidden="@hidden">
    <div class="post-header">
        Generierter Test zu "@Model.ChallengeName" bearbeiten und hinzuf√ºgen:
    </div>
    <div class="card-body challenge-creation-panel">
        <EditForm Model="@Model" Context="formContext">
            <input hidden value="Model.Referer"/>
            <input hidden value="Model.ChallengeId"/>
            <div class="panel-body challenge-creation-panel">
                <MessageHeader Model="Model"/>
                <EditTestFieldsPartial Model="Model.Test" ChallengeId="@Model.ChallengeId" Input="Input"/>
                <button id="btnSave" name="command" type="submit" @onclick="@CreateTest" value="Save" class="btn btn-primary btn-block text-center input-field-padding"><span class="oi oi-data-transfer-upload"></span> Test speichern</button>
                <button id="btnRetry" name="command" type="submit" @onclick="@Retry" value="Retry" class="btn btn-primary btn-block text-center input-field-padding"><span class="oi oi-reload"></span> Test verwerfen und nochmal Starten</button>

            </div>
        </EditForm>
    </div>
</div>

@code {

    [Parameter]
    public TestGeneratorModel<Result, Member> Model { get; set; }

    [Parameter]
    public bool hidden { get; set; } = true;

    [Parameter]
    public EventCallback<bool> hiddenChanged { get; set; }

    [Parameter]
    public Folder Input { get; set; } = new Folder();

    [Parameter]
    public ExtendedChallengeModel ChallengeModel { get; set; }

    public void Retry()
    {
        hidden = true;
        hiddenChanged.InvokeAsync(hidden);
        StateHasChanged();
    }

    public async void CreateTest()
    {
        ChallengeModel.NewFiles = domain.ExtractFoldersToServerFiles(ChallengeModel.NewFiles);
        domain.MapFilesToTest(ChallengeModel.NewFiles, Model.Test.InputFiles, Model.Test.Id.ToString());
        var responseMessage = await httpClient.PostAsJsonAsync<ChallengeTestCreateModel>("api/Test/createtest/Create", Model);
        if (responseMessage.IsSuccessStatusCode)
        {
            var result = await responseMessage.Content.ReadFromJsonAsync<GenericModel>();
            if (result.HasSuccess)
            {
                responseMessage = await httpClient.PostAsJsonAsync<ExtendedChallengeModel>("api/Challenge/Edit/Save", ChallengeModel);
                if (responseMessage.IsSuccessStatusCode)
                {
                    ChallengeModel = await responseMessage.Content.ReadFromJsonAsync<ExtendedChallengeModel>();
                    Console.WriteLine("I reached this.");
                    navi.NavigateTo($"/Challenges/Edit/{Model.ChallengeId}");
                }
            }
        }
    }

}
