@using System.Net.Http.Json
@using SubmissionEvaluation.Client.Shared.Components.Table
@using System.ComponentModel

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IToastService toastService

<a href="/Test/Create/@Model.Id" class="btn btn-outline-dark btn-margin btn-block">Füge neuen Test hinzu</a>

@if (User?.Roles != null && (User.Roles.Contains("admin") || User.Roles.Contains("creator")))
{
    <a href="/Test/CreateWithGenerator/@Model.Id" class="btn btn-outline-dark btn-margin btn-block">Füge neuen Test hinzu mit Testgenerator hinzu</a>
}

<Table TEntry="ChallengeTest" Entries="Model?.Tests" Caption="Tests" NoEntriesText="Keine Tests vorhanden." SearchEnabled="true">
    <Column TEntry="ChallengeTest" Header="Startparameter" StringValue="@(context => ShortenStringIfToLong(string.Join(" ", context.Parameters)))"/>
    <Column TEntry="ChallengeTest" Header="Eingabe" StringValue="@(context => ShortenStringIfToLong(context.Input ?? ""))"/>
    <Column TEntry="ChallengeTest" Header="Ausgabe" StringValue="@(context => ShortenStringIfToLong(context.Output?.Content ?? ""))"/>
    <Column TEntry="ChallengeTest" Header="Vergleichsoptionen" StringValue="@(context => !string.IsNullOrEmpty(context.Output?.Content) ? ShortenCompareSettings(context) : "-")"/>
    <Column TEntry="ChallengeTest" Header="Ausgabedatei" StringValue="@(context => !string.IsNullOrWhiteSpace(context.OutputFile?.Name) ? "1" : "0")"/>
    <Column TEntry="ChallengeTest" Header="Eingabedatei" Value="@(context => context.InputFiles?.Count)"  StringValue="@(context => (context.InputFiles?.Count ?? 0).ToString())"/>
    <Column TEntry="ChallengeTest" Header="Id">
        <button type="button" @onclick="@(async () => await EditTest(context))" class="btn btn-sm"><span class="oi oi-pencil"></span>Bearbeiten</button>
        <button type="button" @onclick="@(async () => await CopyTest(context))" class="btn btn-sm"><span class="oi oi-clipboard"></span>Kopieren</button>
        <button type="button" @onclick="@(async () => await DeleteTest(context))" class="btn btn-sm"><span class="oi oi-trash"></span>Löschen</button>
    </Column>
</Table>

@code {

    [Parameter]
    public ExtendedChallengeModel Model { get; set; }

    private SettingsModel User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await httpClient.GetFromJsonAsync<SettingsModel>("api/Account/getusersettings");
    }

    private static string ShortenCompareSettings(ChallengeTest element)
    {
        string OnlyUpperChars(string str)
        {
            return string.Join("", str.Where(x => char.IsUpper(x) || char.IsDigit(x)));
        }

        var settings = element.Output.CompareSettings;
        var mode = OnlyUpperChars(settings.CompareMode.ToString());
        var trim = OnlyUpperChars(settings.Trim.ToString());
        var whitespaces = OnlyUpperChars(settings.Whitespaces.ToString());
        if (settings.Whitespaces == WhitespacesMode.Remove)
            whitespaces += "em";
        var unify = settings.IsUnifyFloatingNumbers ? "UNI" : "-";
        var umlauts = settings.IsKeepUmlauts ? "UML" : "-";
        var upper = settings.IsIncludeCase ? "Case" : "-";
        var alternatives = element.Output.Alternatives?.Count ?? 0;
        return $"{mode}/{trim}/{whitespaces}/{unify}/{umlauts}/{upper}/{alternatives}";
    }

    public string ShortenStringIfToLong(string textString)
    {
        var previewLength = 50;
        var isStringShortEnough = textString.Length < previewLength;
        return textString.Substring(0, isStringShortEnough ? textString.Length : previewLength) + (isStringShortEnough ? "" : "...");
    }

    private async Task EditTest(ChallengeTest test)
    {
    /* ToDo: Add ReturnUrl */
        var isloggedin = await httpClient.GetFromJsonAsync<bool>("api/Account/loggedin");
        if (!isloggedin)
        {
            navigationManager.NavigateTo("/Account/Login");
        }
        navigationManager.NavigateTo($"/Test/Edit/{Model.Id}/{test.Index}");
    }

    private async Task CopyTest(ChallengeTest test)
    {
    /* ToDo: Add ReturnUrl */
        var copyResult = await httpClient.GetFromJsonAsync<ChallengeTestCreateModel>($"/api/Test/copy/{Model.Id}/{test.Index}");
        if (copyResult.HasSuccess)
        {
            Model.Tests.Add(copyResult.Test);
            toastService.ShowSuccess($"Test {Convert.ToInt32(test.Index) - 1} copied", "Success");
        }
    }

    private async Task DeleteTest(ChallengeTest test)
    {
    /* ToDo: Add ReturnUrl */
        var deleteResult = await httpClient.GetFromJsonAsync<GenericModel>($"/api/Test/delete/{Model.Id}/{test.Index}");
        if (deleteResult.HasSuccess)
        {
            toastService.ShowSuccess($"Test {Convert.ToInt32(test.Index)} deleted", "Success");
            Model.Tests.Remove(test);
            Model.Files.Where(x => x.Name.StartsWith(test.Id.ToString()) || x.Name.StartsWith("_" + test.Id)).ToList().ForEach(x => x.IsDelete = true);
            var responseMessage = await httpClient.PostAsJsonAsync("api/Challenge/Edit/Save", Model);
            if (responseMessage.IsSuccessStatusCode)
            {
                Model = await responseMessage.Content.ReadFromJsonAsync<ExtendedChallengeModel>();
            }
        }
        else
        {
            toastService.ShowError($"Test {Convert.ToInt32(test.Index) - 1} not deleted", "Error");
        }
    }

    string ReplaceFirst(string text, string search, string replace)
    {
        var pos = text.IndexOf(search);
        if (pos < 0)
        {
            return text;
        }
        return text.Substring(0, pos) + replace + text.Substring(pos + search.Length);
    }

}
