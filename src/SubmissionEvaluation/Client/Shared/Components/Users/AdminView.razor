@using System.Net.Http.Json
@using SubmissionEvaluation.Client.Services
@using SubmissionEvaluation.Shared.Models.Admin
@using Member = SubmissionEvaluation.Contracts.ClientPocos.Member
@using SubmissionEvaluation.Client.Shared.Components.Table
@using System.ComponentModel

@inject HttpClient httpClient
@inject IToastService toaster
@inject NavigationManager navi
@inject LoginService loginService

@if (ActionToConfirm != null)
{
    <ConfirmAction ActionMessage="@ActionMessage" OnConfirmed="ActionToConfirm" OnCanceled="CancelAction"></ConfirmAction>
}
else
{
    <Table TEntry="Member" Entries="Memberships?.Members" TableClass="table table-sm table-responsive" SearchEnabled="true">
        <Column TEntry="Member" Header="Uid" StringValue="@(context => context.Uid)">
            <a class="no-link-coloring" href=@($"Members/Member/{context.Id}")>@(context.Uid != null ? context.Uid.Length > 8 ? context.Uid.Substring(0, 7) + ".." : context.Uid : "")</a>
        </Column>
        <Column TEntry="Member" Header="Name" StringValue="@(context => context.Name)" SortDirection="ListSortDirection.Ascending">
            <a class="no-link-coloring" href=@($"Members/Member/{context.Id}")>@context.Name</a>
        </Column>
        <Column TEntry="Member" Header="Status" StringValue="@(context => context.State.ToString())"/>
        <Column TEntry="Member" Header="Rollen" StringValue="@(context => string.Join(", ", context.Roles))"/>
        <Column TEntry="Member" Header="Gruppen" StringValue="@(context => string.Join(", ", context.Groups))"/>
        <Column TEntry="Member" Header="Aktionen">
            @if (context.State == MemberState.Pending)
            {
                <a @onclick="() => ActivatePendingMember(context.Id)" title="Freischalten" class="btn btn-sm">
                    <span class="oi oi-lock-unlocked"></span>
                </a>
            }
            else
            {
                <a @onclick="() => ImpersonateMember(context.Id)" title="Impersonieren" class="btn btn-sm">
                    <span class="oi oi-person"></span>
                </a>
                <a href=@($"Admin/ManageMemberRoles/{context.Id}") title="Rollen verwalten" class="btn btn-sm">
                    <span class="oi oi-people"></span>
                </a>
                <a href=@($"Admin/ManageMemberGroups/{context.Id}") title="Gruppen verwalten" class="btn btn-sm">
                    <span class="oi oi-tags"></span>
                </a>
                <a href=@($"Admin/ManageMemberReviewLevel/{context.Id}") title="Reviewlevel bearbeiten" class="btn btn-sm">
                    <span class="oi oi-arrow-circle-top"></span>
                </a>
                @if (context.Type != MemberType.Ldap)
                {
                    <button type="button" class="btn btn-sm btn-link" @onclick="@(() => ResetPassword(context))" title="Passwort zurücksetzen">
                        <span class="oi oi-key"></span>
                    </button>
                }
                <button type="button" class="btn btn-sm btn-link" @onclick="@(() => DeleteMember(context))" title="Löschen">
                    <span class="oi oi-trash"></span>
                </button>
                <button type="button" class="btn btn-sm btn-link" @onclick="@(() => ResetAvailableChallenges(context))" title="Reset der verfügbaren Aufgaben">
                    <span class="oi oi-action-undo"></span>
                </button>
            }
        </Column>
    </Table>
}

@code {

    [Parameter]
    public GroupMemberships<Member> Memberships { get; set; }

    [Parameter]
    public EventCallback<GroupMemberships<Member>> MembershipsChanged { get; set; }

    string ActionMessage { get; set; } = string.Empty;
    Func<Task> ActionToConfirm { get; set; }

    protected override Task OnInitializedAsync()
    {
        return Task.CompletedTask;
    }

    async void ActivatePendingMember(string id)
    {
        var responseMessage = await httpClient.PostAsJsonAsync("api/Admin/ActivatePendingMember", id);
        var model = new AdminUserModel<Member>();
        if (responseMessage.IsSuccessStatusCode)
        {
            model = await responseMessage.Content.ReadFromJsonAsync<AdminUserModel<Member>>();
        }
        if (model.HasSuccess)
        {
            Memberships = model.GroupMemberships.First();
            await MembershipsChanged.InvokeAsync(Memberships);
            toaster.ShowSuccess("Pending member was successfully activated.");
        }
        StateHasChanged();
    }

    async void ImpersonateMember(string id)
    {
        var responseMessage = await httpClient.PostAsJsonAsync("api/Admin/ImpersonateMember", id);
        var model = new AdminUserModel<Member>();
        if (responseMessage.IsSuccessStatusCode)
        {
            model = await responseMessage.Content.ReadFromJsonAsync<AdminUserModel<Member>>();
        }
        if (model.HasSuccess)
        {
            loginService.InvokeEvent();
            navi.NavigateTo("Account/View");
        }
    }

    async void IncreaseMemberReviewLevel(string id)
    {
        var responseMessage = await httpClient.PostAsJsonAsync("api/Admin/IncreaseMemberReviewLevel", id);
        if (responseMessage.IsSuccessStatusCode)
        {
            var model = await responseMessage.Content.ReadFromJsonAsync<AdminUserModel<Member>>();
            Memberships = model.GroupMemberships.First();
            await MembershipsChanged.InvokeAsync(Memberships);
        }
        StateHasChanged();
    }

    private void ResetPassword(IMember member)
    {
        ActionMessage = $"Wollen sie das Password für {member.Name} wirklich zurücksetzen?";
        ActionToConfirm = () =>
        {
            ActionToConfirm = null;
            navi.NavigateTo($"Admin/ResetMemberPassword/{member.Id}");
            return Task.CompletedTask;
        };
    }

    private void ResetAvailableChallenges(IMember member)
    {
        ActionMessage = $"Wollen sie die Liste der bearbeitbaren Challenges für {member.Name} wirklich zurücksetzen?";
        ActionToConfirm = async () =>
        {
            ActionToConfirm = null;
            await httpClient.PostAsJsonAsync("api/Admin/ResetMemberAvailableChallenges", member.Id);
        };
    }

    private void DeleteMember(IMember member)
    {
        ActionMessage = $"Wollen sie die {member.Name} wirklich löschen?";
        ActionToConfirm = async () =>
        {
            ActionToConfirm = null;
            await httpClient.DeleteAsync($"api/Group/{member.Id}");
            Memberships.Members = Memberships.Members.Where(x => x.Id != member.Id).ToList();
        };
    }

    private void CancelAction()
    {
        ActionToConfirm = null;
    }

}
