@using Member = SubmissionEvaluation.Contracts.ClientPocos.Member
@using SubmissionEvaluation.Shared.Models.Admin
@using Group = SubmissionEvaluation.Contracts.ClientPocos.Group
@using Submission = SubmissionEvaluation.Contracts.Data.Result

<h2> Gruppe: @memberships.GroupName </h2>
<table id="users-table" class="display table">
    <thead class="ranking_table">
        <tr class="ranking_head">
            <th class="th_name">Id</th>
            <th class="th_name">Name</th>
            <th class="th_name">Erreichte Punktanzahl</th>
            <th class="th_name">Höchste Übereinstimmung (%)</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var member in memberships.Members)
        {
            {
                var challenges = Groups.Groups.Single(x => x.Id == memberships.GroupName).AvailableChallenges.Where(x => !member.SolvedChallenges.Contains(x)).ToList();
                challenges.AddRange(Groups.Groups.Single(x => x.Id == memberships.GroupName).ForcedChallenges.Where(x => !member.SolvedChallenges.Contains(x)));
            }
            <tr>
                @{
                    var Points = PointsForRelevantMembers[member.Id].ToList();
                    int duplicateMetric = 0;
                    int points_in_group = 0;
                    var available_challenges = Groups.Groups.Single(x => x.Id == memberships.GroupName).AvailableChallenges ?? new string[] { };
                    var forced_challenges = Groups.Groups.Single(x => x.Id == memberships.GroupName).ForcedChallenges ?? new string[] { };
                    foreach (var item in Points)
                    {
                        // Check if the challenge is in the current group, if so add points to current score
                        if (available_challenges.Contains(item.Entry.Challenge) || forced_challenges.Contains(item.Entry.Challenge))
                        {
                            points_in_group += item.Entry.Points;
                        }
                        // Determine the highest duplicate score of the user
                        if (item.Entry.Points > 0 && duplicateMetric < item.Entry.DuplicateScore)
                        {
                            duplicateMetric = item.Entry.DuplicateScore;
                        }
                    }
                }
                <td>
                    <a class="no-link-coloring" href="@($"Members/Member/{member.Id}")">@member.Uid</a>
                </td>
                <td>
                    <a class="no-link-coloring" href="@($"Members/Member/{member.Id}")">@member.Name</a>
                </td>
                <td>
                    @points_in_group / @Groups.Groups.Single(x => x.Id == memberships.GroupName).RequiredPoints
                </td>
                <td>
                    @duplicateMetric
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public GroupMemberships<Member> memberships { get; set; }
    [Parameter]
    public AdminGroupsModel<Group> Groups { get; set; }
    [Parameter]
    public Dictionary<string, List<PointsHoldTupel<Submission, Member>>> PointsForRelevantMembers { get; set; }
}
