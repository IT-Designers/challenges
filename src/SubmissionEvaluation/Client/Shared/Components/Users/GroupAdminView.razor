@using Submission = SubmissionEvaluation.Contracts.Data.Result
@using Member = SubmissionEvaluation.Contracts.ClientPocos.Member
@using Group = SubmissionEvaluation.Contracts.ClientPocos.Group
@using SubmissionEvaluation.Shared.Models.Admin
@using SubmissionEvaluation.Client.Shared.Components.Table
@using System.ComponentModel

<h2> Gruppe: @Memberships?.GroupName </h2>

<Table TEntry="Member" Entries="Memberships?.Members" NoEntriesText="Keine Benutzer vorhanden." SearchEnabled="true">
    <Column TEntry="Member" Header="Id" Value="@(context => context.Uid)">
        <a class="no-link-coloring" href="@($"Members/Member/{context.Id}")">@context.Uid</a>
    </Column>
    <Column TEntry="Member" Header="Name" Value="@(context => context.Name)">
        <a class="no-link-coloring" href="@($"Members/Member/{context.Id}")">@context.Name</a>
    </Column>
    <Column TEntry="Member" Header="Erreichte Punktanzahl" Value="@(context => GetPoints(context))" StringValue="@(context => GetPoints(context).ToString())">
        @GetPoints(context) / @Groups.Groups.Single(x => x.Id == Memberships.GroupName).RequiredPoints
    </Column>
    <Column TEntry="Member" Header="Höchste Übereinstimmung (%)" Value="@(context => GetDuplicate(context))" StringValue="@(context => GetDuplicate(context).ToString())"/>
</Table>

@code {

    [Parameter]
    public GroupMemberships<Member> Memberships { get; set; }

    [Parameter]
    public AdminGroupsModel<Group> Groups { get; set; }

    [Parameter]
    public Dictionary<string, List<PointsHoldTupel<Submission, Member>>> PointsForRelevantMembers { get; set; }

    private int GetPoints(Member member)
    {
        var points = PointsForRelevantMembers[member.Id].ToList();
        var availableChallenges = Groups.Groups.Single(x => x.Id == Memberships.GroupName).AvailableChallenges ?? new string[] { };
        var forcedChallenges = Groups.Groups.Single(x => x.Id == Memberships.GroupName).ForcedChallenges ?? new string[] { };

        return points.Where(item => availableChallenges.Contains(item.Entry.Challenge) || forcedChallenges.Contains(item.Entry.Challenge)).Sum(item => item.Entry.Points);
    }

    private int GetDuplicate(Member member)
    {
        return PointsForRelevantMembers[member.Id].Where(item => 0 < item.Entry.Points).Max(item => item.Entry.DuplicateScore);
    }

}
