@using Submission = SubmissionEvaluation.Contracts.Data.Result
@using Member = SubmissionEvaluation.Contracts.ClientPocos.Member
@using Group = SubmissionEvaluation.Contracts.ClientPocos.Group
@using SubmissionEvaluation.Shared.Models.Admin

<h2> Gruppe: @Memberships.GroupName </h2>
<table id="users-table" class="display table">
    <thead class="ranking_table">
    <tr class="ranking_head">
        <th class="th_name">Id</th>
        <th class="th_name">Name</th>
        <th class="th_name">Erreichte Punktanzahl</th>
        <th class="th_name">Höchste Übereinstimmung (%)</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var member in Memberships.Members)
    {
        {
            var challenges = Groups.Groups.Single(x => x.Id == Memberships.GroupName).AvailableChallenges.Where(x => !member.SolvedChallenges.Contains(x)).ToList();
            challenges.AddRange(Groups.Groups.Single(x => x.Id == Memberships.GroupName).ForcedChallenges.Where(x => !member.SolvedChallenges.Contains(x)));
        }
        <tr>
            @{
                var points = PointsForRelevantMembers[member.Id].ToList();
                var duplicateMetric = 0;
                var pointsInGroup = 0;
                var availableChallenges = Groups.Groups.Single(x => x.Id == Memberships.GroupName).AvailableChallenges ?? new string[] {};
                var forcedChallenges = Groups.Groups.Single(x => x.Id == Memberships.GroupName).ForcedChallenges ?? new string[] {};
                foreach (var item in points)
                {
                    // Check if the challenge is in the current group, if so add points to current score
                    if (availableChallenges.Contains(item.Entry.Challenge) || forcedChallenges.Contains(item.Entry.Challenge))
                    {
                        pointsInGroup += item.Entry.Points;
                    }
                    // Determine the highest duplicate score of the user
                    if (item.Entry.Points > 0 && duplicateMetric < item.Entry.DuplicateScore)
                    {
                        duplicateMetric = item.Entry.DuplicateScore;
                    }
                }
            }
            <td>
                <a class="no-link-coloring" href="@($"Members/Member/{member.Id}")">@member.Uid</a>
            </td>
            <td>
                <a class="no-link-coloring" href="@($"Members/Member/{member.Id}")">@member.Name</a>
            </td>
            <td>
                @pointsInGroup / @Groups.Groups.Single(x => x.Id == Memberships.GroupName).RequiredPoints
            </td>
            <td>
                @duplicateMetric
            </td>
        </tr>
    }
    </tbody>
</table>

@code {

    [Parameter]
    public GroupMemberships<Member> Memberships { get; set; }

    [Parameter]
    public AdminGroupsModel<Group> Groups { get; set; }

    [Parameter]
    public Dictionary<string, List<PointsHoldTupel<Submission, Member>>> PointsForRelevantMembers { get; set; }

}
