@using SubmissionEvaluation.Shared.Models.Shared
<div class="@ButtonStyling">
    <button type="button" hidden="@(!Hidden)" class="btn btn-outline-dark file-button @ButtonStyling new_button" @onclick="ShowOrHide">Neuer Ordner</button>
    <input hidden="@Hidden" @bind-value="@FolderName" style="@FontColor" class="folder_input @ButtonStyling" @onkeypress="() => { FontColor = InputButtonHelper.GetNormalColor; StateHasChanged(); }"/>
    <div class="align-center">
        <button type="button" hidden="@Hidden" class="btn btn-outline-dark file-button @ButtonStyling" @onclick="NewFolder">Anlegen</button>
        <button type="button" hidden="@Hidden" class="btn btn-outline-dark file-button @ButtonStyling" @onclick="ShowOrHide">Abbrechen</button>
    </div>
</div>

@code {

    [Parameter]
    public List<DetailedInputFile> Files { get; set; } = new List<DetailedInputFile>();

    [Parameter]
    public List<File> OtherFiles { get; set; } = new List<File>();

    [Parameter]
    public bool Small { get; set; } = true;

    [Parameter]
    public string Path { get; set; }

    public bool Hidden { get; set; } = true;
    private string ButtonStyling { get; set; } = "newFolderButtonFlexed";
    public string FolderName { get; set; } = "Enter a name.";
    public string FontColor { get; set; } = InputButtonHelper.GetNormalColor;

    [Parameter]
    public EventCallback<List<DetailedInputFile>> FilesChanged { get; set; } = new EventCallback<List<DetailedInputFile>>();

    protected override void OnInitialized()
    {
        if (!Small)
        {
            ButtonStyling = "newFolderButtonBig";
        }
    }

    public void ShowOrHide()
    {
        Hidden = !Hidden;
    }

    public void NewFolder()
    {
        if (InputButtonHelper.CheckValidity(OtherFiles, Files, FolderName, new File()))
        {
            var folder = new Folder {Name = FolderName, OriginalName = FolderName, Path = Path.StartsWith(Folder.PathSeperator) ? "" : Path};
            Files.Add(folder);
            ShowOrHide();
            FilesChanged.InvokeAsync(Files);
        }
        else
        {
            FontColor = "color:red;";
        }
        StateHasChanged();
    }

}
