@page "/Admin/Users"

@using Submission = SubmissionEvaluation.Contracts.Data.Result
@using System.Net.Http.Json
@using Member = SubmissionEvaluation.Contracts.ClientPocos.Member
@using SubmissionEvaluation.Shared.Models.Admin
@using SubmissionEvaluation.Shared.Models.Permissions
@using Group = SubmissionEvaluation.Contracts.ClientPocos.Group
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages
@using SubmissionEvaluation.Client.Pages.Members
@using SubmissionEvaluation.Client.Shared.Components.Users

@inject HttpClient HttpClient
@inject NavigationManager Navi
@inject IJSRuntime Runtime

<style>
    a:hover { cursor: pointer; }
</style>
<div class="row">
    <div class="col-12">
        <div class="post-area post">
            <div class="post-header">

                <h1>
                    Benutzer verwalten
                    @if (Permissions.IsAdmin)
                    {
                        <a href="Admin/AddUser" title="Neuen User anlegen" class="btn btn-sm">
                            <span class="oi oi-plus"></span>
                        </a>
                    }
                </h1>

            </div>
            @if (Model != null)
            {
                if (Permissions.IsAdmin)
                {
                    var memberships = Model.GroupMemberships.First();
                    <AdminView @bind-memberships="memberships"/>
                }
                else
                {
                    @foreach (var memberships in Model.GroupMemberships.OrderByDescending(x => x.GroupName))
                    {
                        <GroupAdminView Memberships="memberships" Groups="Groups" PointsForRelevantMembers="PointsForRelevantMembers"/>
                    }
                }
            }
            else
            {
                <Wave />
            }
        </div>
    </div>
</div>

@code {
    AdminUserModel<Member> Model { get; set; }

    Permissions Permissions { get; set; } = new Permissions();
    AdminGroupsModel<Group> Groups { get; set; } = new AdminGroupsModel<Group>();
    Dictionary<string, List<PointsHoldTupel<Submission, Member>>> PointsForRelevantMembers { get; set; } = new Dictionary<string, List<PointsHoldTupel<Submission, Member>>>();

    protected override async Task OnInitializedAsync()
    {
        Permissions = await HttpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (!PermissionHelper.CheckPermissions(Actions.View, "Users", Permissions))
        {
            Navi.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
        }
        if (Permissions.IsAdmin)
        {
            Model = await HttpClient.GetFromJsonAsync<AdminUserModel<Member>>("api/Admin/Users");
        }
        else
        {
            Model = await HttpClient.GetFromJsonAsync<AdminUserModel<Member>>("api/Group/Users");
            Groups = await HttpClient.GetFromJsonAsync<AdminGroupsModel<Group>>("api/Group/Groups");
            var res = await HttpClient.PostAsJsonAsync("api/Members/PointsList", Model.GroupMemberships.SelectMany(x => x.Members).Select(x => x.Id).Distinct());
            if (res.IsSuccessStatusCode)
            {
                var pointLists = await res.Content.ReadFromJsonAsync<List<Tuple<string, List<PointsHoldTupel<Submission, Member>>>>>();
                foreach (var (memberId, pointList) in pointLists)
                {
                    PointsForRelevantMembers[memberId] = pointList;
                }
            }
        }
        StateHasChanged();
    }

}
