@page "/Admin/Operations"
@using System.Net.Http.Json
@using SubmissionEvaluation.Client.Services
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages
@using SubmissionEvaluation.Shared.Models.Permissions

@inject HttpClient HttpClient
@inject NavigationManager Navi
@inject MaintenanceService MaintenanceService

<div class="row">
    <div class="col-12">
        <div class="post-area post">
            <div>
                <h1>Wartungsoperationen</h1>
                <div class="row">
                    @if (IsMaintenanceMode)
                    {
                        <button @onclick="DisableMaintenanceMode" class="btn btn-warning btn-margin col-3">Wartungsmodus beenden</button>
                    }
                    else
                    {
                        <button @onclick="EnableMaintenanceMode" class="btn btn-warning btn-margin col-3">Wartungsmodus aktivieren</button>
                    }
                    <DownloadComponent Class="btn btn-warning btn-margin col-3 operation-btn" Content="Member-Liste exportieren (CSV)" Url="api/Admin" Id="ExportMembers" FileName="members.csv"/>
                    <DownloadComponent Class="btn btn-warning btn-margin col-3 operation-btn" Content="LÃ¶sungen exportieren (Source->zip)" Url="api/Admin" Id="ExportSolutions" FileName="sources.zip"/>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    bool IsMaintenanceMode { get; set; }

    protected override async void OnInitialized()
    {
        var permissions = await HttpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (!PermissionHelper.CheckPermissions(Actions.Edit, "Users", permissions))
        {
            Navi.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
        }
        IsMaintenanceMode = await HttpClient.GetFromJsonAsync<bool>("api/Home/IsMaintenanceMode");
        StateHasChanged();
    }

    async void DisableMaintenanceMode()
    {
        var responseMessage = await HttpClient.PostAsJsonAsync<bool?>("api/Admin/DisableMaintenanceMode", null);
        if (responseMessage.IsSuccessStatusCode)
        {
            IsMaintenanceMode = await responseMessage.Content.ReadFromJsonAsync<bool>();
        }
        StateHasChanged();
        MaintenanceService.InvokeEvent();
    }

    async void EnableMaintenanceMode()
    {
        var responseMessage = await HttpClient.PostAsJsonAsync<bool?>("api/Admin/EnableMaintenanceMode", null);
        if (responseMessage.IsSuccessStatusCode)
        {
            IsMaintenanceMode = await responseMessage.Content.ReadFromJsonAsync<bool>();
        }
        StateHasChanged();
        MaintenanceService.InvokeEvent();
    }

}
