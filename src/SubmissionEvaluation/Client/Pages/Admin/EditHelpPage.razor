@page "/Admin/EditHelpPage/{pathOne}/{pathTwo}"
@page "/Admin/EditHelpPage/{pathOne}"
@using System.Net.Http.Json
@using SubmissionEvaluation.Shared.Models.Help
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages

@inject HttpClient HttpClient
@inject NavigationManager Navi

@if (Model != null)
    {
    <div class="row">
        <div class="col-lg-9">
            <div class="post-area">

                <EditForm Model="Model" Context="formContext">
                    <ValidationSummary/>
                    <DataAnnotationsValidator/>
                    <MessageHeader Model="Model"/>

                    <div class="post-header">
                        <h4 class="col-form-label">
                            Titel
                        </h4>
                        <ValidationMessage For="() => Model.Title" class="text-danger"/>
                        <InputText @bind-Value="Model.Title" class="form-control"/>
                    </div>
                    <div class="post">
                        <h4 class="col-form-label">Parent*</h4>
                        <ValidationMessage For="() => Model.Parent" class="text-danger"/>
                        <InputText @bind-Value="Model.Parent" class="form-control"/>


                        <h4 class="col-form-label">Beschreibung*</h4>
                        <ValidationMessage For="() => Model.Description" class="text-danger"/>
                        <InputTextArea @bind-Value="Model.Description" class="form-control"/>
                    </div>
                    <button id="btnSave" name="command" type="submit" value="Save" @onclick='() => SendUpdateToServer("Save", formContext)' class="btn btn-outline-dark btn-block text-center input-field-padding"><span class="oi oi-book"></span> Seite speichern</button>
                    <button id="btnSaveAndClose" name="command" type="submit" value="SaveAndClose" @onclick='() => SendUpdateToServer("SaveAndClose", formContext)' class="btn btn-outline-dark btn-block text-center input-field-padding"><span class="oi oi-book"></span> Seite speichern und zur√ºck</button>
                </EditForm>

            </div>
        </div>
        <div class="col-lg-3">
            <div class="shadow-bottom-center" style="margin-bottom: 10px">
                <div class="categories-list-header">Topics</div>
                <ol>
                    @if (Model.Pages != null)
                    {
                        foreach (var hp in Model.Pages)
                        {
                            <li>
                                <a href="/Help/ViewPage/@hp.Path">@hp.Title</a>
                            </li>
                            if (hp.SubPages.Count > 0)
                            {
                                foreach (var shp in hp.SubPages)
                                {
                                    <li>
                                        <a href="/Help/ViewPage/@shp.Path">@shp.Title</a>
                                    </li>
                                }
                            }
                        }
                    }
                </ol>
            </div>
        </div>
    </div>
        }

@code {
           HelpModel Model { get; set; }

           [Parameter]
           public string PathOne { get; set; }

           [Parameter]
           public string PathTwo { get; set; }

           string path;

           protected override async Task OnInitializedAsync()
           {
               path = PathTwo == null ? PathOne : PathOne + "\\" + PathTwo;
               if (string.IsNullOrWhiteSpace(path))
               {
                   Navi.NavigateTo("Help/ViewPage");
               }
               var permissions = await HttpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
               if (!PermissionHelper.CheckPermissions(Actions.Edit, "HelpPage", permissions))
               {
                   Navi.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
               }
               var responseMessage = await HttpClient.PostAsJsonAsync("api/Admin/EditHelpPage", path);
               if (responseMessage.IsSuccessStatusCode)
               {
                   Model = await responseMessage.Content.ReadFromJsonAsync<HelpModel>();
               }
               if (Model.HasError)
               {
                   Navi.NavigateTo("Help/ViewPage");
               }
           }

           async void SendUpdateToServer(string command, EditContext context)
           {
               var isValid = context.Validate();
               if (isValid)
               {
                   var responseMessage = await HttpClient.PostAsJsonAsync("api/Admin/UpdateHelpPage", Model);
                   if (responseMessage.IsSuccessStatusCode)
                   {
                       Model = await responseMessage.Content.ReadFromJsonAsync<HelpModel>();
                   }
                   if (Model.HasSuccess && command.Equals("SaveAndClose"))
                   {
                       Navi.NavigateTo($"Help/ViewPage/{path}");
                   }
                   else if (!Model.HasSuccess)
                   {
                       Navi.NavigateTo("Help/ViewPage");
                   }
                   StateHasChanged();
               }
           }

}
