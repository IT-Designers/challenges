@page "/Bundle/List"
@using System.Net.Http.Json
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Models.Permissions  
@inject HttpClient httpClient
@inject NavigationManager navi

<div class="row">
    <div class="col-12">
        <div class="post-area post">
            <div class="post-header">
                <h1>
                    Bundles verwalten
                    <a href="Bundle/Create" title="Neues Bundle anlegen" class="btn btn-sm">
                        <span class="oi oi-plus"></span>
                    </a>
                </h1>
            </div>
            @if (Model != null)
            {
                <MessageHeader Model="Model" />
                <label for="searchInput">Suche: </label><input type="search" id="searchInput" aria-controls="users-table" @onkeypress="StateHasChanged" @bind="searchInput" placeholder="Suche nach einem Bundle" />
                <table id="bundles-table" class="display table">
                    <thead>
                        <tr>
                            <th>
                                <button class="no-styling" @onclick='() => Sort("Title")'>Titel</button>
                            </th>
                            <th>
                                <button class="no-styling" @onclick='() => Sort("Author")'>Autor</button>
                            </th>
                            <th>
                                <button class="no-styling" @onclick='() => Sort("Category")'>Kategorie</button>
                            </th>
                            <th>Veröffentlicht</th>
                            <th>Challengeliste</th>
                            <th>Bearbeiten</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var bundle in Model.Bundles.Where(x => x.Title.ToLower().Contains(searchInput.ToLower())))
                        {
                            <tr>
                                <td>
                                    <a class="no-link-coloring" href="@($"/Bundleview/{bundle.Id}")">
                                        @bundle.Title
                                    </a>
                                </td>
                                <td>
                                    <a href="@($"Member/Members/{bundle.AuthorId}")" class="author">@(bundle.Author)</a>
                                </td>
                                <td>@Model.Categories[bundle.Category]</td>
                                @if (bundle.IsDraft)
                                {
                                    <td data-sort="0">Unveröffentlicht</td>
                                }
                                else
                                {
                                    <td data-sort="1">Veröffentlicht</td>
                                }
                                <td>@(bundle.Challenges.Count)</td>
                                <td>
                                    <a href="@($"/Bundle/Edit/{bundle.Id}")" class="btn btn-outline-dark btn-margin btn-block">Bearbeiten</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div>
                    <a href="/Bundle/Create" class="btn btn-outline-dark btn-margin col-12">Bundle anlegen</a>
                </div>
            }
        </div>
    </div>
</div>

@code {
    BundleOverviewModel Model { get; set; }
    private string searchInput { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var Permissions = await httpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (!PermissionHelper.CheckPermissions(Actions.VIEW, "Bundles", Permissions))
        {
            navi.NavigateTo($"Home/Error/{SubmissionEvaluation.Shared.Classes.Messages.ErrorMessages.NoPermission}");
        }
        Model = await httpClient.GetFromJsonAsync<BundleOverviewModel>("api/Bundle/List");
        StateHasChanged();
    }

    void Sort(string type)
    {
        var bundles = Model.Bundles.ToList();
        switch (type)
        {
            case "Title":
                bundles.Sort((x, y) => x.Title.CompareTo(y.Title));
                break;
            case "Author":
                bundles.Sort((x, y) => x.Author.CompareTo(y.Author));
                break;
            case "Category":
                bundles.Sort((x, y) => x.Category.CompareTo(y.Category));
                break;
        }
        Model.Bundles = bundles;
        StateHasChanged();
    }

}
