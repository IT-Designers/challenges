@page "/Bundle/Edit/{bundleid}"
@using System.Net.Http.Json
@using SubmissionEvaluation.Client.Shared.Components.Bundle
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages
@using SubmissionEvaluation.Shared.Models.Permissions

@inject HttpClient HttpClient
@inject NavigationManager Navi
<style>
    .consoleblock {
        background: #000 !important;
        border-width: 1px !important;
        color: #DDD !important;
        font-family: Menlo, Monaco, Consolas, "Courier New", monospace !important;
        font-size: 13px !important;
        line-height: 1.1 !important;
        padding: 9.5px !important;
    }
</style>
@if (Model != null)
{
    <div>
        <div class="post-area">
            <div class="post-header">
                Bundle "@Model.Id" bearbeiten
            </div>
            <div class="card-body challenge-creation-panel">
                <EditForm Model="@Model" Context="formContext" id="chalengeform">
                    <ValidationSummary/>
                    <DataAnnotationsValidator/>
                    <div class="card-body challenge-creation-panel">
                        <SubmissionEvaluation.Client.Shared.Components.MessageHeader Model="Model"/>
                        <div id="project-group" class="form-group">
                            <h4 class="col-form-label">ID (Ändern nicht mehr möglich)</h4>
                            <InputText @bind-Value="@Model.Id" readonly class="form-control"/>
                        </div>

                        <EditBundleFieldsPartial Model="Model" Settings="CustomizationSettings" @ref="Partial"/>

                        <button id="btnSave" name="command" @onclick='() => SubmitForm("Save", formContext)' value="Save" class="btn btn-outline-dark btn-block text-center input-field-padding"><span class="oi oi-book"></span> Bundle speichern</button>
                        <button id="btnSaveAndClose" name="command" @onclick='() => SubmitForm("SaveAndClose", formContext)' value="SaveAndClose" class="btn btn-outline-dark btn-block text-center input-field-padding"><span class="oi oi-book"></span> Bundle speichern und zurück</button>
                        @if (Model.IsDraft)
                        {
                            <button id="btnPublish" name="command" @onclick='() => SubmitForm("Publish", formContext)' value="Publish" class="btn btn-success btn-block text-center input-field-padding"><span class="oi oi-pin"></span> Bundle veröffentlichen</button>
                        }

                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string BundleId { get; set; }

    EditBundleFieldsPartial Partial { get; set; }
    BundleModel Model { get; set; }
    CustomizationSettingsClient CustomizationSettings { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var permissions = await HttpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (!PermissionHelper.CheckPermissions(Actions.Edit, "Bundles", permissions, Restriction.Bundles, BundleId))
        {
            Navi.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
        }
        CustomizationSettings = await HttpClient.GetFromJsonAsync<CustomizationSettingsClient>("api/Account/GetCustomSettings");
        Model = await HttpClient.GetFromJsonAsync<BundleModel>("api/Bundle/Edit/" + BundleId);
        if (Model.HasError)
        {
            Navi.NavigateTo($"Home/Error/{Model.Message}");
        }
        StateHasChanged();
    }

    private async Task SubmitForm(string command, EditContext context)
    {
        await Partial.SaveEditor();
        if (context.Validate())
        {
            var responseMessage = await HttpClient.PostAsJsonAsync($"api/Bundle/Edit/{command}", Model);
            if (responseMessage.IsSuccessStatusCode)
            {
                Model = await responseMessage.Content.ReadFromJsonAsync<BundleModel>();
            }
            if (Model.HasSuccess && (command.Equals("SaveAndClose") || command.Equals("Publish")))
            {
                Navi.NavigateTo("Bundle/List");
            }
        }
        StateHasChanged();
    }

}
