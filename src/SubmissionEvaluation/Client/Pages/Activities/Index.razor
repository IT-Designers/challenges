@page "/Activities"
@using System.Net.Http.Json
@using SubmissionEvaluation.Shared.Models.Activities
@using SubmissionEvaluation.Client.Shared.Components.Table
@using System.ComponentModel

@inject HttpClient httpClient

<div class="row">
    <div class="col-sm-12">
        <div class="post-area">
            <div class="post-header">
                <h1>Die letzten Aktivit채ten</h1>
            </div>
            <div class="post">
                <Table TEntry="Activity" Entries="Entries" Caption="Aktivit채ten" NoEntriesText="Keine Aktivit채ten vorhanden." SearchEnabled="true">
                    <Column TEntry="Activity" Header="Datum" Value="@(context => context.Date)" StringValue="@(context => context.Date.ToShortDateString())" SortDirection="ListSortDirection.Descending"/>
                    <Column TEntry="Activity" Header="Typ" StringValue="@(TypeFromActivity)"/>
                    <Column TEntry="Activity" Header="Aufgabe/Wettbewerb" StringValue="@(context => context.Reference)">
                        @switch (context.Type)
                        {
                            case ActivityType.NewSubmission:
                            case ActivityType.NewChallenge:
                            case ActivityType.ChangedChallenge:
                                <NavLink href=@($"/Challenge/View/{context.Reference}")>@context.Reference</NavLink>
                                break;
                            case ActivityType.VersionUpdate:
                                <NavLink href=@("https://gogs.itd-services.de/Studentenprojekte/Challenges/commit/" + context.Reference)>...</NavLink>
                                break;
                            default:
                                @context.Reference
                                break;
                        }
                    </Column>
                    @if (UserSettings?.Roles?.Contains("admin") ?? false)
                    {
                        <Column TEntry="Activity" Header="Benutzer" StringValue="@(context => context.UserName)">
                            <a href=@($"Members/Member/{context.UserId}")>@context.UserName</a>
                        </Column>
                    }
                </Table>
            </div>
        </div>
    </div>
</div>

@code {
    ActivitiesModel Model { get; set; }
    SettingsModel UserSettings { get; set; }
    IEnumerable<Activity> Entries => Model?.Entries?.Where(x => x.Type != ActivityType.NewReviewResult && x.Type != ActivityType.NewUser);

    protected override async void OnInitialized()
    {
        UserSettings = await httpClient.GetFromJsonAsync<SettingsModel>("api/Account/getusersettings");
        Model = await httpClient.GetFromJsonAsync<ActivitiesModel>("api/Activities/Activities");
        StateHasChanged();
    }

    private static string TypeFromActivity(Activity activity) => activity.Type switch
    {
        ActivityType.NewSubmission => "Neue Einreichung",
        ActivityType.NewChallenge => "Neue Aufgabe",
        ActivityType.ChangedChallenge => "Aufgabe ge채ndert",
        ActivityType.VersionUpdate => "System aktualisiert",
        _ => "Undefiniert"
        };

}
