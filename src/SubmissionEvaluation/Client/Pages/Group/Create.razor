@page "/Group/Create"

@using System.Net.Http.Json
@using Challenge = SubmissionEvaluation.Contracts.ClientPocos.Challenge
@using Group = SubmissionEvaluation.Contracts.ClientPocos.Group
@using Member = SubmissionEvaluation.Contracts.ClientPocos.Member
@using SubmissionEvaluation.Client.Shared.Components.Groups
@using SubmissionEvaluation.Shared.Models.Admin
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages

@inject HttpClient HttpClient
@inject NavigationManager Navi

<div>
    <div class="post-area">
        @if (Model != null)
        {
            <div class="post-header">
                Neue Gruppe erstellen
            </div>
            <div class="card-body challenge-creation-panel">
                <EditForm Model="Model" OnValidSubmit="CreateNewGroup">
                    <DataAnnotationsValidator/>
                    <div class="card-body challenge-creation-panel">
                        <MessageHeader Model="Model"/>
                        <div id="project-group" class="form-group">
                            <h4 class="col-form-label">ID* (Späteres Ändern nicht möglich!)</h4>
                            <InputText @bind-Value="Model.Id" class="form-control"/>
                            <ValidationMessage For="() => Model.Id" class="text-danger"/>
                        </div>

                        <EditGroupFieldsPartial Model="Model"/>

                        <button id="create" type="submit" class="btn btn-outline-dark btn-block text-center input-field-padding" value="Gruppe erstellen!"><span class="oi oi-book"></span> Gruppe erstellen</button>
                    </div>
                </EditForm>
            </div>
        }
        else {
            <Wave />
        }
    </div>
</div>


@code {
    GroupModel<Challenge, Member, Group> Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var permissions = await HttpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (!PermissionHelper.CheckPermissions(Actions.Create, "Groups", permissions))
        {
            Navi.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
        }
        Model = await HttpClient.GetFromJsonAsync<GroupModel<Challenge, Member, Group>>("api/Group/CreateGroup");
        StateHasChanged();
    }

    async void CreateNewGroup()
    {
        var responseMessage = await HttpClient.PostAsJsonAsync("api/Group/CreateGroup", Model);
        if (responseMessage.IsSuccessStatusCode)
        {
            Model = await responseMessage.Content.ReadFromJsonAsync<GroupModel<Challenge, Member, Group>>();
        }
        if (Model.HasSuccess)
        {
            Navi.NavigateTo("Groups");
        }
    }

}
