@page "/Group/Edit/{groupId}"
@using Challenge = SubmissionEvaluation.Contracts.ClientPocos.Challenge
@using System.Net.Http.Json
@using SubmissionEvaluation.Client.Shared.Components.Groups
@using SubmissionEvaluation.Shared.Models.Admin
@using Member = SubmissionEvaluation.Contracts.ClientPocos.Member
@using Group = SubmissionEvaluation.Contracts.ClientPocos.Group
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Classes
@inject HttpClient httpClient
@inject NavigationManager navi
<div>
    <div class="post-area">
        @if (Model != null)
        {
            <div class="post-header">
                Gruppe "@Model.Id" bearbeiten
            </div>
            <div class="card-body challenge-creation-panel">
                <EditForm Model="Model" Context="formContext" id="challengeform" enctype="multipart/form-data">
                    <ValidationSummary/>
                    <DataAnnotationsValidator/>
                    <div class="card-body challenge-creation-panel">
                        <MessageHeader Model="Model"/>

                        <div id="project-group" class="form-group">
                            <h4 class="col-form-label">ID (Ändern nicht mehr möglich)</h4>
                            @if (Permissions.isAdmin)
                            {
                                <a href=@($"Group/Edit/Rename/{Model.Id}")>Umbenennen</a>
                            }
                            <input readonly class="form-control" @bind-value="Model.Id"/>
                        </div>

                        <EditGroupFieldsPartial Model="Model"/>

                        <button id="btnSave" name="command" type="submit" value="Save" class="btn btn-primary btn-block text-center input-field-padding" @onclick='e => SendModelToServer(formContext, "Save")'><span class="oi oi-book"></span> Gruppe speichern </button>
                        <button id="btnSaveAndClose" name="command" type="submit" value="SaveAndClose" class="btn btn-primary btn-block text-center input-field-padding" @onclick='() => SendModelToServer(formContext, "SaveAndClose")'><span class="oi oi-book"></span> Gruppe speichern und zurück</button>
                    </div>
                </EditForm>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
        public string groupId { get; set; }

        GroupModel<Challenge, Member, Group> Model { get; set; }
        SettingsModel UserSettings { get; set; }
        Permissions Permissions { get; set; }

    protected override async void OnInitialized()
    {
        Permissions = await httpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if(!PermissionHelper.CheckPermissions(Actions.EDIT, "Groups", Permissions, Restriction.GROUPS, groupId)) {
            navi.NavigateTo($"Home/Error/{SubmissionEvaluation.Shared.Classes.Messages.ErrorMessages.NoPermission}");
        }
        Model = await httpClient.GetFromJsonAsync<GroupModel<Challenge, Member, Group>>($"api/Group/EditGroup/{groupId}");
        StateHasChanged();
    }

    async void SendModelToServer(EditContext editContext, string command)
    {
        if(editContext.Validate()) {
            var responseMessage = await httpClient.PostAsJsonAsync<GroupModel<Challenge, Member, Group>>("api/Group/EditGroup", Model);
            if(responseMessage.IsSuccessStatusCode)
            {
                Model = await responseMessage.Content.ReadFromJsonAsync<GroupModel<Challenge, Member, Group>>();
            }
            if (Model.HasSuccess && command.Equals("SaveAndClose"))
            {
                navi.NavigateTo("Groups");
            } else {
                    base.StateHasChanged();
            }
        }
    }

}
