@page "/Groups"

@using System.Net.Http.Json
@using Group = SubmissionEvaluation.Contracts.ClientPocos.Group
@using SubmissionEvaluation.Shared.Models.Admin
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages
@using SubmissionEvaluation.Client.Shared.Components.Table
@using System.ComponentModel

@inject HttpClient httpClient
@inject NavigationManager navi

<div class="row">
    <div class="col-12">
        <div class="post-area post">
            @if (Model != null)
            {
                <div class="post-header">
                    <h1>
                        Gruppen verwalten
                        @if (Permissions.IsAdmin)
                        {
                            <a href="Group/Create" title="Neue Gruppe anlegen" class="btn btn-sm">
                                <span class="oi oi-plus"></span>
                            </a>
                        }
                    </h1>
                </div>
                if (ActionToConfirm != null)
                {
                    <ConfirmAction ActionMessage="@ActionMessage" OnConfirmed="ActionToConfirm" OnCanceled="CancelAction"></ConfirmAction>
                }
                else
                {
                    <MessageHeader Model="Model"/>
                    <Table TEntry="Group" Entries="Model.Groups" SearchEnabled="true">
                        <Column TEntry="Group" Header="Id" StringValue="@(context => context.Id)"/>
                        <Column TEntry="Group" Header="Name" StringValue="@(context => context.Title)" SortDirection="ListSortDirection.Ascending"/>
                        <Column TEntry="Group" Header="Aktionen">
                            <a href=@($"Group/Edit/{context.Id}") title="Editieren" class="btn btn-sm">
                                <span class="oi oi-pencil"></span>
                            </a>
                            @if (Permissions.IsAdmin)
                            {
                                <button type="button" class="btn btn-sm btn-link" @onclick="@(() => DeleteGroup(context))" title="Löschen">
                                    <span class="oi oi-trash"></span>
                                </button>
                                <a href=@($"Group/Copy/{context.Id}") title="Kopieren" class="btn btn-sm">
                                    <span class="oi oi-copywriting"></span>
                                </a>
                            }
                        </Column>
                    </Table>
                }
            }
            else
            {
                <Wave/>
            }
        </div>

    </div>
</div>


@code {
    AdminGroupsModel<Group> Model { get; set; }
    Permissions Permissions { get; set; }

    string ActionMessage { get; set; } = string.Empty;
    Func<Task> ActionToConfirm { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Permissions = await httpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (!PermissionHelper.CheckPermissions(Actions.View, "Groups", Permissions))
        {
            navi.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
        }
        Model = await httpClient.GetFromJsonAsync<AdminGroupsModel<Group>>("api/Group/Groups");

        StateHasChanged();
    }

    private void DeleteGroup(IGroup group)
    {
        ActionMessage = $"Wollen sie die Gruppe {group.Title} wirklich löschen?";
        ActionToConfirm = async () =>
        {
            ActionToConfirm = null;
            await httpClient.DeleteAsync($"api/Group/{group.Id}");
            Model.Groups = Model.Groups.Where(x => x.Id != group.Id);
        };
    }

    private void CancelAction()
    {
        ActionToConfirm = null;
    }

}
