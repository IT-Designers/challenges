@page "/Groups"

@using System.Net.Http.Json
@using Group = SubmissionEvaluation.Contracts.ClientPocos.Group
@using SubmissionEvaluation.Shared.Models.Admin
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages

@inject HttpClient HttpClient
@inject NavigationManager Navi

<div class="row">
    <div class="col-12">
        <div class="post-area post">
            @if (Model != null)
            {
                <div class="post-header">
                    <h1>
                        Gruppen verwalten
                        @if (Permissions.IsAdmin)
                        {
                            <a href="Group/Create" title="Neue Gruppe anlegen" class="btn btn-sm">
                                <span class="oi oi-plus"></span>
                            </a>
                        }
                    </h1>
                </div>
                <div id="groups-table_wrapper" class="dataTables_wrapper no-footer">
                    <label for="searchInput">Suche: </label><input type="search" id="searchInput" aria-controls="users-table" @onkeypress="StateHasChanged" @bind="SearchValue" placeholder="Suche nach einer Gruppe"/>
                    <MessageHeader Model="Model"/>
                    <table id="groups-table" class="display table dataTable no-footer" role="grid">
                        <thead>
                        <tr>
                            <th>
                                <button class="no-styling" @onclick="SortById">ID</button>
                            </th>
                            <th>
                                <button class="no-styling" @onclick="SortByTitle">Name</button>
                            </th>
                            <th>Aktionen</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (IGroup group in Model.Groups.Where(x => x.Title.ToLower().Contains(SearchValue.ToLower()) || x.Id.ToLower().Contains(SearchValue.ToLower())))
                        {
                            <tr>
                                <td>@group.Id</td>
                                <td>@group.Title</td>
                                <td>
                                    @if (PermissionHelper.CheckPermissions(Actions.View, "Users", Permissions))
                                    {
                                        <a href=@($"Group/{group.Id}/Users") title="Gruppenmitglieder" class="btn btn-sm">
                                            <span class="oi oi-people"></span>
                                        </a>
                                    }
                                    <a href=@($"Group/Edit/{group.Id}") title="Editieren" class="btn btn-sm">
                                        <span class="oi oi-pencil"></span>
                                    </a>
                                    @if (Permissions.IsAdmin)
                                    {
                                        <a href=@($"Admin/ConfirmAction/{group.Id}/DeleteGroup") title="LÃ¶schen" class="btn btn-sm">
                                            <span class="oi oi-trash"></span>
                                        </a>
                                        <a href=@($"Group/Copy/{group.Id}") title="Kopieren" class="btn btn-sm">
                                            <span class="oi oi-copywriting"></span>
                                        </a>
                                    }
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <Wave/>
            }
        </div>

    </div>
</div>


@code {
    AdminGroupsModel<Group> Model { get; set; }
    string SearchValue { get; set; } = string.Empty;
    Permissions Permissions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Permissions = await HttpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (!PermissionHelper.CheckPermissions(Actions.View, "Groups", Permissions))
        {
            Navi.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
        }
        Model = await HttpClient.GetFromJsonAsync<AdminGroupsModel<Group>>("api/Group/Groups");
        StateHasChanged();
    }

    void SortById()
    {
        var groups = Model.Groups.ToList();
        groups.Sort((x, y) => x.Id.CompareTo(y.Id));
        Model.Groups = groups;
    }

    void SortByTitle()
    {
        var groups = Model.Groups.ToList();
        groups.Sort((x, y) => x.Title.CompareTo(y.Title));
        Model.Groups = groups;
    }

}
