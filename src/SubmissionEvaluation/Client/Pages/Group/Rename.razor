@page "/Group/Edit/Rename/{Id}"
@using SubmissionEvaluation.Shared.Classes.Messages
@using System.Net.Http.Json
@using SubmissionEvaluation.Shared.Models.Account
@inject HttpClient httpClient
@inject NavigationManager navi
<div class="post-area">
    <div class="post-header">
        Aufgabe umbenennen
    </div>
    <div class="card-body challenge-creation-panel">
        <MessageHeader Model="Model"/>
        <EditForm Model="Model" OnValidSubmit="RenameGroup">
            <div>
                <label for="renameFromTextBox">Bisherige Group-ID</label>
                <InputText readonly id="renameFromTextBox" class="form-control" @bind-Value="Model.Name"/>
                <p id="renameFromHelpBlock" class="form-text text-muted">
                    Gibt die Gruppe an, welche umbenannt werden soll.
                </p>
            </div>
            <div>
                <label for="renameToTextBox">Neue Group-ID</label>
                <InputText @bind-Value="Model.NewName" id="renameToTextBox" class="form-control"/>
                <p id="renameToHelpBox" class="form-text text-muted">
                    Gibt die neue Group-ID an.
                </p>
            </div>
            <button id="btnCopy" name="command" type="submit" value="copy" class="btn btn-primary btn-block text-center input-field-padding"><span class="oi oi-book"></span> Gruppe umbenennen</button>
        </EditForm>
    </div>
</div>

@code {

    [Parameter]
    public string Id { get; set; }

    RenameModel Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var userSettings = await httpClient.GetFromJsonAsync<SettingsModel>("api/Account/getusersettings");
        if (!userSettings.Roles.Contains("admin"))
        {
            navi.NavigateTo($"Home/Error/{SubmissionEvaluation.Shared.Classes.Messages.ErrorMessages.NoPermission}");
        }
        Model = new RenameModel
        {
            Name = Id,
            Referer = $"/Admin/EditGroup/{Id}"
        };
        StateHasChanged();
    }

    async void RenameGroup()
    {
        if (Model.Name != null && (Model.NewName != null) & !Model.Name.Equals(Model.NewName))
        {
            var responseMessage = await httpClient.PostAsJsonAsync<RenameModel>("api/Group/RenameGroup", Model);
            bool success = false;
            if(responseMessage.IsSuccessStatusCode)
            {
                success = await responseMessage.Content.ReadFromJsonAsync<bool>();
            }
            if (!responseMessage.IsSuccessStatusCode || !success)
            {
                Model.HasError = true;
                Model.Message = ErrorMessages.GenericError;
            }
            else
            {
                navi.NavigateTo($"/Admin/EditGroup/{Model.NewName}");
            }
        }
        else
        {
            Model.HasError = true;
            Model.Message = ErrorMessages.MissingId;
            StateHasChanged();
        }
    }

}
