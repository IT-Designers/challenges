@page "/Members/List"

@using System.Net.Http.Json
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages
@using SubmissionEvaluation.Client.Shared.Components.Table
@using System.ComponentModel
@using SubmissionEvaluation.Contracts.Data.Ranklist

@inject HttpClient httpClient
@inject NavigationManager navigationManager

<style>
    .rankChange { font-size: 1.2em; }

    button {
        background-color: inherit;
        border: hidden;
        color: #337ab7;
    }

    button:hover {
        color: #0056b3;
        text-decoration: underline;
    }
</style>

<div class="col-sm-12">
    <div class="post-area">
        @if (Model != null)
        {
            <div class="post-header">
                @((MarkupString)(Model.IsSemesterRanking ? "Semesterranking" : "Mitglieder"))
            </div>

            <div class="post">
                @if (Settings?.EnableRating == true)
                {
                    <ul class="nav nav-tabs col-12" style="display: flex">
                        @if (Model != null)
                        {
                            <li class="nav-item">
                                <button @onclick="() => ChangeView(null, null, false)" class="nav-link @(!Model.IsSemesterRanking ? "active" : "")">Gesamt</button>
                            </li>
                            <li class="nav-item">
                                <button @onclick="() => ChangeView(null, null, true)" title="@Model.CurrentSemester" class="nav-link @(Model.IsSemesterRanking ? "active" : "")">Aktuelles Semester</button>
                            </li>
                        }
                    </ul>
                }

                <Table TEntry="GlobalSubmitter" Entries="Model?.Submitters" TheadClass="thead-light thead-vertical" NoEntriesText="Keine Mitglieder vorhanden." SearchEnabled="true">
                    @if (Permissions.IsAdmin)
                    {
                        <Column TEntry="GlobalSubmitter" Header="Gruppen" StringValue="@(context => string.Join(",", Model.Members[context.Id].Groups))">
                            @foreach (var group in Model.Members[context.Id].Groups)
                            {
                                <button @onclick='@(() => ChangeView("group", group, Model.IsSemesterRanking))'>@group</button>
                            }
                        </Column>
                    }
                    <Column TEntry="GlobalSubmitter" Header="Name" StringValue="@(context => Model.Members[context.Id]?.Name)">
                        <a href=@($"/Members/Member/{context.Id}")>@Model.Members[context.Id]?.Name</a>
                    </Column>
                    @if (Settings.EnableRating || Permissions.IsAdmin)
                    {
                        <Column TEntry="GlobalSubmitter" Header="GelÃ¶st" StringValue="@(context => context.SolvedCount.ToString())" TextAlignment="TextAlignment.Right"/>
                        <Column TEntry="GlobalSubmitter" Header="Erstellt" StringValue="@(context => context.ChallengesCreated.ToString())" TextAlignment="TextAlignment.Right"/>
                    }
                    @if (Permissions.IsAdmin)
                    {
                        <Column TEntry="GlobalSubmitter" Header="Duplikate" StringValue="@(context => context.DuplicationScore.ToString())" TextAlignment="TextAlignment.Right"/>
                        <Column TEntry="GlobalSubmitter" Header="Difficulty" StringValue="@(context => Model.Members[context.Id]?.AverageDifficultyLevel.ToString())" TextAlignment="TextAlignment.Right"/>
                    }
                    @if (Settings.EnableReview)
                    {
                        <Column TEntry="GlobalSubmitter" Header="Sterne" StringValue="@(context => context.Stars.ToString())">
                            @if (context.Stars > 0)
                            {
                                <img style="box-shadow: unset" src="/images/Rating@(context.Stars).png" width="48"/>
                            }
                            else
                            {
                                <img style="box-shadow: unset" title="Noch keine Bewertung" src="/images/Rating0.png" width="48"/>
                            }
                        </Column>
                    }
                    @if (Settings.EnableRating || Permissions.IsAdmin)
                    {
                        <Column TEntry="GlobalSubmitter" Header="Punkte" Value="@(context => context.Points)" TextAlignment="TextAlignment.Right"/>
                        <Column TEntry="GlobalSubmitter" Header="Rang" Value="@(context => context.Rank)" TextAlignment="TextAlignment.Right" SortDirection="ListSortDirection.Ascending">
                            @context.Rank
                            @if (context.RankChange > 0)
                            {
                                <span style="color: #99ff99;" class="rankChange">&uarr;@context.RankChange</span>
                            }
                            else if (context.RankChange < 0)
                            {
                                <span style="color: #ffbbbb;" class="rankChange">&darr;@Math.Abs(context.RankChange)</span>
                            }
                            else
                            {
                                <span style="color: #cccccc;" class="rankChange">&plusmn;0</span>
                            }
                        </Column>
                    }
                </Table>

                @if (Model?.IsSemesterRanking ?? false)
                {
                    <div class="current_semester_period">Aktuelles Semester: @Model?.CurrentSemester</div>
                }
            </div>
        }
        else
        {
            <Wave />
        }
        </div>
</div>

@code {
    MemberListModel<Contracts.ClientPocos.Member> Model { get; set; }
    FeatureSettings Settings { get; set; }
    Permissions Permissions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await httpClient.GetFromJsonAsync<MemberListModel<Contracts.ClientPocos.Member>>("api/Members/ShowList/false");
        Settings = await httpClient.GetFromJsonAsync<FeatureSettings>("api/Account/getSettings");
        Permissions = await httpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (!PermissionHelper.CheckPermissions(Actions.View, "Members", Permissions) & !Settings.EnableRating)
        {
            navigationManager.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
        }
        StateHasChanged();
    }

    async void ChangeView(string filterMode, string filterValue, bool semester)
    {
        if (filterMode != null && filterValue != null)
        {
            Model = await httpClient.GetFromJsonAsync<MemberListModel<Contracts.ClientPocos.Member>>($"api/Members/ShowList/{semester}/{filterMode}/{filterValue}");
        }
        else
        {
            Model = await httpClient.GetFromJsonAsync<MemberListModel<Contracts.ClientPocos.Member>>($"api/Members/ShowList/{semester}");
        }
        if (Model.HasError)
        {
            navigationManager.NavigateTo($"Home/Error/{Model.Message}");
        }
        StateHasChanged();
    }

}
