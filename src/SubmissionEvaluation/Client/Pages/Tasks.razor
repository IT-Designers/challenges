@page "/Tasks"
@using System.Net.Http.Json
@using SubmissionEvaluation.Client.Shared.Components.Table

@inject HttpClient httpClient
@inject NavigationManager navigationManager

@if (model != null)
{
    <div class="row">
        <div class="col-sm-12">
            <div class="post-area" style="min-height: 3cm">
                <div class="post-header">
                    <a href="Activities" style="color: #000">Aktivitäten</a>
                </div>
                <div style="padding: 0 30px;">
                    <Table TEntry="Activity" TableClass="table table-sm table-borderless table-responsive" Entries="Entries">
                        <Column TEntry="Activity">
                            @switch (context.Type)
                            {
                                case ActivityType.NewSubmission:
                                    @("Neue Einreichung")
                                    break;
                                case ActivityType.NewChallenge:
                                    @("Neue Aufgabe")
                                    break;
                                case ActivityType.ChangedChallenge:
                                    @("Aufgabe geändert")
                                    break;
                                case ActivityType.VersionUpdate:
                                    @("System aktualisiert")
                                    break;
                                default:
                                    @("Undefiniert")
                                    break;
                            }
                        </Column>
                        <Column TEntry="Activity">
                            @switch (context.Type)
                            {
                                case ActivityType.NewSubmission:
                                case ActivityType.NewChallenge:
                                case ActivityType.ChangedChallenge:
                                    <NavLink href=@($"/Challenge/View/{context.Reference}")>@context.Reference</NavLink>
                                    break;
                                case ActivityType.VersionUpdate:
                                    <NavLink href=@("https://gogs.itd-services.de/Studentenprojekte/Challenges/commit/" + context.Reference)>...</NavLink>
                                    break;
                                default:
                                    @context.Reference
                                    break;
                            }
                        </Column>
                    </Table>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-12">
            @foreach (var category in model.CategoryStats)
            {
                <div class="post-area">
                    <div class="post-header">
                        <a href="Challenge/Category/@category.Key" style="color: #000">@category.Key</a>
                    </div>
                    <div class="post-list-body">
                        <div class="all-posts" post-cate="All">
                            @{
                                @foreach (var entry in category.Value.Take(7))
                                {
                                    if (entry.Id != null)
                                    {
                                        <ChallengeTile Entry="entry" Member="model.Member" Bundles="Bundles.Where(x => x.Category.Equals(category.Key)).ToList()"/>
                                    }
                                }
                                if (category.Value.Count > 7)
                                {
                                    <a class="post-list-item" href="Challenge/Category/@category.Key" style="height: 110px">
                                        <h2 style="margin: 0; padding-top: 15%; text-align: center;"> Mehr...</h2>
                                    </a>
                                }
                            }
                        </div>
                        <div style="clear: both"></div>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <Wave/>
}

@code {
    IndexHomeModel model;
    List<BundleModel> Bundles { get; set; }

    IEnumerable<Activity> Entries => model?.Activities?.Where(x => x.Type != ActivityType.NewReviewResult && x.Type != ActivityType.NewUser).Take(5);

    protected override async Task OnInitializedAsync()
    {
        model = await httpClient.GetFromJsonAsync<IndexHomeModel>("api/Home/IndexModel");
        if (model.CategoryStats.Count == 0)
        {
            navigationManager.NavigateTo("Account/Groups");
        }

        Bundles = await httpClient.GetFromJsonAsync<List<BundleModel>>("api/Bundle/AllBundles");
        StateHasChanged();
    }

}


