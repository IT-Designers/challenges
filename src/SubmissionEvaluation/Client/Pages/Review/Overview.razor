@page "/Review/Overview"
@page "/Review/Overview/{command}"

@using System.Net.Http.Json
@using SubmissionEvaluation.Shared.Models.Review
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages

@inject HttpClient HttpClient
@inject NavigationManager Navi

<div class="row">
    <div class="col-12">
        <div class="post-area post">
            <div class="post-header">
                <h1>Reviews</h1>
            </div>
            <div class="input-field-padding" style="margin-top: 20px">
                Informationen zum Review finden sich <a href="/Help/Review">hier</a>.
            </div>
            @if (Model != null)
            {
                <div class="input-field-padding" style="margin-top: 20px">
                    @if (Model.ReviewableSubmissions == null || !Model.ReviewableSubmissions.Any())
                    {
                        <h4>Zur Zeit sind keine Einreichungen ohne Review vorhanden.</h4>
                    }
                    else
                    {
                        <h4>Folgende Einreichungen können gereviewed werden:</h4>
                        <table class="ranking_table">
                            <tr class="ranking_head">
                                <th class="th_name">Challenge</th>
                                <th class="th_name">Sprache</th>
                                <th class="th_name">Einreichdatum</th>
                                <th class="th_name_compilers">Review</th>
                            </tr>
                            @foreach (var submission in Model.ReviewableSubmissions)
                            {
                                <tr>
                                    <td>@submission.Challenge</td>
                                    <td>@submission.Language</td>
                                    <td>@submission.SubmissionDate</td>
                                    <td class="th_not_name">
                                        <NavLink href=@($"Review/Tool/{submission.Challenge}/{submission.SubmissionId}") class="btn btn-outline-dark">Review</NavLink>
                                    </td>
                                </tr>
                            }
                        </table>
                    }
                </div>

                @if (Permissions.IsAdmin)
                {
                    <div class="input-field-padding" style="margin-top: 20px">
                        @if (Model.RunningReviews?.Any() != true)
                        {
                            <h4>Zur Zeit arbeitet keiner an einem Review.</h4>
                        }
                        else
                        {
                            <h4>Es laufen derzeit folgende Reviews:</h4>
                            <table class="ranking_table">
                                <tr class="ranking_head">
                                    <th class="th_name">Challenge</th>
                                    <th class="th_name">Reviewer</th>
                                    <th class="th_name">Sprache</th>
                                    <th class="th_name">Läuft ab am</th>
                                </tr>
                                @foreach (var submission in Model.RunningReviews)
                                {
                                    <tr>
                                        <td>@submission.Challenge</td>
                                        <td>@submission.ReviewerName</td>
                                        <td>@submission.Language</td>
                                        <td>@submission.Status</td>
                                    </tr>
                                }
                            </table>
                        }
                    </div>
                }
            }
            else
            {
                <Wave />
            }
        </div>
    </div>
</div>

@code {
    ReviewOverviewModel Model { get; set; }
    Permissions Permissions { get; set; }
    SettingsModel UserSettings { get; set; }

    [Parameter]
    public string Command { get; set; }

    [Parameter]
    public string ChallengeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Permissions = await HttpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (!PermissionHelper.CheckPermissions(Actions.View, "Review", Permissions))
        {
            Navi.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
        }
        UserSettings = await HttpClient.GetFromJsonAsync<SettingsModel>("api/Account/getusersettings");
        Model = await HttpClient.GetFromJsonAsync<ReviewOverviewModel>("api/Review/GetSubmissionOverview");
        Model.RunningReviews = Model.RunningReviews ?? new List<RunningReviewModel>();
        if (Model.RunningReviews.Any(x => x.ReviewerName.Equals(UserSettings.Name)) && (Command == null || !Command.Equals("Canceled")))
        {
            var runningReview = Model.RunningReviews.Where(x => x.ReviewerName.Equals(UserSettings.Name)).FirstOrDefault();
            Navi.NavigateTo($"Review/Tool/{runningReview.Challenge}/{runningReview.Submission}");
        }
        StateHasChanged();
    }

}
