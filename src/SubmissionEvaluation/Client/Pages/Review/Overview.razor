@page "/Review/Overview"
@page "/Review/Overview/{command}"

@using System.Net.Http.Json
@using SubmissionEvaluation.Shared.Models.Review
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages
@using SubmissionEvaluation.Client.Shared.Components.Table
@using System.ComponentModel

@inject HttpClient httpClient
@inject NavigationManager navi

<div class="row">
    <div class="col-12">
        <div class="post-area post">
            <div class="post-header">
                <h1>Reviews</h1>
            </div>
            <div class="input-field-padding" style="margin-top: 20px">
                Informationen zum Review finden sich <a href="/Help/Review">hier</a>.
            </div>

            <Table TEntry="Result" Entries="Model?.ReviewableSubmissions" Caption="Einreichungen ohne Review" NoEntriesText="Keine Einreichungen ohne Review vorhanden." SearchEnabled="true">
                <Column TEntry="Result" Header="Challenge" StringValue="@(context => context.Challenge)"/>
                <Column TEntry="Result" Header="Sprache" StringValue="@(context => context.Language)"/>
                <Column TEntry="Result" Header="Einreichdatum"  Value="@(context => context.SubmissionDate)" StringValue="@(context => context.SubmissionDate.ToShortDateString())" SortDirection="ListSortDirection.Ascending"/>
                <Column TEntry="Result" Header="Review">
                    <NavLink href=@($"Review/Tool/{context.Challenge}/{context.SubmissionId}") class="btn btn-outline-dark">Review</NavLink>
                </Column>
            </Table>

            @if (Permissions?.IsAdmin == true)
            {
                <Table TEntry="RunningReviewModel" Entries="Model?.RunningReviews" Caption="Laufende Reviews" NoEntriesText="Keine laufenden Reviews vorhanden." SearchEnabled="true">
                    <Column TEntry="RunningReviewModel" Header="Challenge" StringValue="@(context => context.Challenge)"/>
                    <Column TEntry="RunningReviewModel" Header="Reviewer" StringValue="@(context => context.ReviewerName)"/>
                    <Column TEntry="RunningReviewModel" Header="Sprache" StringValue="@(context => context.Language)"/>
                    <Column TEntry="RunningReviewModel" Header="LÃ¤uft ab am"  Value="@(context => context.ReviewDate ?? DateTime.MaxValue)" StringValue="@(context => context.ReviewDate?.ToShortDateString() ?? "-")" SortDirection="ListSortDirection.Ascending"/>
                </Table>
            }
        </div>
    </div>
</div>

@code {
    ReviewOverviewModel Model { get; set; }
    Permissions Permissions { get; set; }
    SettingsModel UserSettings { get; set; }

    [Parameter]
    public string Command { get; set; }

    [Parameter]
    public string ChallengeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Permissions = await httpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (!PermissionHelper.CheckPermissions(Actions.View, "Review", Permissions))
        {
            navi.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
        }
        UserSettings = await httpClient.GetFromJsonAsync<SettingsModel>("api/Account/getusersettings");
        Model = await httpClient.GetFromJsonAsync<ReviewOverviewModel>("api/Review/GetSubmissionOverview");
        Model.RunningReviews = Model.RunningReviews ?? new List<RunningReviewModel>();
        if (Model.RunningReviews.Any(x => x.ReviewerName.Equals(UserSettings.Name)) && (Command == null || !Command.Equals("Canceled")))
        {
            var runningReview = Model.RunningReviews.Where(x => x.ReviewerName.Equals(UserSettings.Name)).FirstOrDefault();
            navi.NavigateTo($"Review/Tool/{runningReview.Challenge}/{runningReview.Submission}");
        }
        StateHasChanged();
    }

}
