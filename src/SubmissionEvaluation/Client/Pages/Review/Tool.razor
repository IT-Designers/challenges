@page "/Review/Tool/{challengeId}/{submissionId}"

@using System.Net.Http.Json
@using SubmissionEvaluation.Client.Services
@using SubmissionEvaluation.Client.Shared.Components.Review
@using SubmissionEvaluation.Client.Shared.Models
@using SubmissionEvaluation.Contracts.Data.Review
@using SubmissionEvaluation.Shared.Models.Review
@using Newtonsoft.Json

@inject HttpClient HttpClient
@inject NavigationManager Navi
@inject IJSRuntime Runtime
@inject ReviewSynchronizer Synchronizer
@inject IToastService ToastService
@inject FileExplorerDomain Domain
@inject ILocalStorageService LocalStorage

<link href="css/review.css" rel="stylesheet"/>
<div class="post-area">
    @if (Model != null)
    {
        <div class="post-header">
            <span id="challengeTilePostHeader">Review for Challenge:<a class="no-link-coloring" href=@($"Challenge/View/{ChallengeId}")>@Model.Challenge</a></span>
            <button type="submit" @onclick="CancelReview" class="btn btn-outline-dark">Cancel</button>
            <a id="saveButton" @onclick="SaveReview"style="float: right; margin-top: 7px" class="btn btn-outline-dark oi oi-book" title="Review Lokal speichern">Speichern</a>
        </div>
        <div class="card-body challenge-creation-panel">
            <div id="reviewer">
                <div class="row">
                    <div class="col-12">
                        <span id="timecounter" class="pull-right">
                            <Timer ReviewStartTime="@ReviewStartTime"/>
                        </span>
                    </div>
                </div>
                <div class="row form-group">
                    <SideMenu SourceFiles="@Model.SourceFiles"/>
                    <div class="col-sm-10 col-12 editor-wrapper">
                            <ReviewerFile CurrentIssue="CurrentIssue" AllComments="AllComments" Initial="Synchronizer.AllFilesWithComments[0].SourceFile" Language="@Model.Langugage"/>
                    </div>
                </div>
                @if (Model.GuidedQuestions != null)
                {
                    <GuidedQuestionsQuestionaire GuidedQuestions="@Model.GuidedQuestions" SubmitReview="@SubmitReview" AllComments="AllComments" @bind-CurrentIssue="CurrentIssue"/>
                }
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public string ChallengeId { get; set; }

    [Parameter]
    public string SubmissionId { get; set; }

    DateTime ReviewStartTime { get; } = DateTime.Now;
    ReviewToolModel Model { get; set; }
    HashSet<ReviewComments> AllComments { get; } = new HashSet<ReviewComments>();
    Issue CurrentIssue { get; set; }
    bool IsFullScreen { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var stringify = await HttpClient.GetStringAsync($"api/Review/GetReviewToolModel/{ChallengeId}/{SubmissionId}");
        Model = JsonConvert.DeserializeObject<ReviewToolModel>(stringify);
        if (Model != null && Model.HasError)
        {
            Navi.NavigateTo($"Home/Error/{Model.Message}");
        }
        var loadCheck = await CheckLoadFiles();
        if (loadCheck != null)
        {
            Synchronizer.AllFilesWithComments = loadCheck;
            Synchronizer.AllFilesWithComments.ForEach(x => AllComments.UnionWith(x.Comments.Comments));
            var guidedQuestions = await CheckLoadQuestions();
            if (guidedQuestions != null)
            {
                Model.GuidedQuestions = guidedQuestions;
            }
        }
        else
        {
            Synchronizer.clear();
            foreach (var file in Model.SourceFiles)
            {
                Synchronizer.AllFilesWithComments.Add(new FileReviewCommentsAssoziater(new ReviewCodeComments {FileName = file.Name, Comments = new List<ReviewComments>()}, file));
            }
        }
        Synchronizer.CurrentAssociation = Synchronizer.AllFilesWithComments[0];
        StateHasChanged();
    }

    void CancelReview()
    {
        HttpClient.PostAsJsonAsync("api/Review/CancelReview", Model);
        Navi.NavigateTo("Review/Overview/Canceled");
    }

    async void SubmitReview()
    {
        var data = new ReviewData {Challenge = ChallengeId, Id = SubmissionId, Time = (DateTime.Now - ReviewStartTime).ToString(@"hh\:mm\:ss"), ResultComments = Synchronizer.AllFilesWithComments.Select(x => x.Comments).ToArray(), GuidedQuestionResult = Model.GuidedQuestions.ToArray()};
        var responseMessage = await HttpClient.PostAsJsonAsync("api/Review/SubmitReview", data);
        if (responseMessage.IsSuccessStatusCode)
        {
            var result = await responseMessage.Content.ReadFromJsonAsync<GenericModel>();
            if (result.HasSuccess)
            {
                Navi.NavigateTo("Review/Overview/SubmitReview");
            }
            else
            {
                ToastService.ShowError("Es gab einen Fehler beim Abgeben des Reviews. Bitte speichere es und probiere es sp√§ter noch einmal.", "Error");
            }
        }
    }

    async Task<List<FileReviewCommentsAssoziater>> CheckLoadFiles()
    {
        var item = await LocalStorage.GetItemAsync<string>($"{ChallengeId}/{SubmissionId}/Files");
        if (item == null)
        {
            return null;
        }
        var answer = await Runtime.InvokeAsync<bool>("confirmUsingSavings");
        if (answer)
        {
            try
            {
                var newList = JsonConvert.DeserializeObject<List<FileReviewCommentsAssoziater>>(item);
                return newList;
            }
            catch (JsonException)
            {
                ToastService.ShowError("Fehler beim Laden der Daten.", "Error");
                return null;
            }
        }
        return null;
    }

    async Task<GuidedQuestion[]> CheckLoadQuestions()
    {
        var item = await LocalStorage.GetItemAsync<string>($"{ChallengeId}/{SubmissionId}/Questions");
        if (item == null)
        {
            return null;
        }
        try
        {
            var newQuestions = JsonConvert.DeserializeObject<GuidedQuestion[]>(item);
            return newQuestions;
        }
        catch (JsonException)
        {
            ToastService.ShowError("Fehler beim Laden der Daten.", "Error");
            return null;
        }
    }

    async void SaveReview()
    {
        var savingsFiles = JsonConvert.SerializeObject(Synchronizer.AllFilesWithComments);
        var savingQuestions = JsonConvert.SerializeObject(Model.GuidedQuestions);
        await LocalStorage.SetItemAsync($"{ChallengeId}/{SubmissionId}/Files", savingsFiles);
        await LocalStorage.SetItemAsync($"{ChallengeId}/{SubmissionId}/Questions", savingQuestions);
        ToastService.ShowSuccess("Review lokal gespeichert.", "Saved");
    }

    //TODO: Check all base.StateHasChanged, if they are really needed.
    // Reimplement fullscreen, if you are too bored. :D
}
