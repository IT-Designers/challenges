@page "/Test/CreateWithGenerator/{challengeid}"

@using System.Net.Http.Json
@using SubmissionEvaluation.Client.Services
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Models.Shared
@using Member = SubmissionEvaluation.Contracts.ClientPocos.Member

@inject HttpClient HttpClient
@inject NavigationManager Navi
@inject FileExplorerDomain Domain

<div class="post-area">
    <TestGeneratorInput Model="Model" Action="CreateTest" Hidden="!Hidden"/>
    @if (TestFolder != null && TestFolder.NewFilesInFolder.Count != 0)
    {
        <TestGeneratorConfirmation Model="Model" @bind-hidden="Hidden" Input='FileExplorerDomain.FetchFolder("Input", TestFolder)' ChallengeModel="ChallengeModel"/>
    }
</div>

@code{
    private TestGeneratorModel<Result, Member> Model { get; set; } = new TestGeneratorModel<Result, Member>();

    [Parameter]
    public string ChallengeId { get; set; }

    private Folder TestFolder { get; set; }
    private ExtendedChallengeModel ChallengeModel { get; set; }
    private bool Hidden { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (ChallengeId == null) Navi.NavigateTo("/Challenges");
        else
        {
            var permissions = await HttpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
            if (!PermissionHelper.CheckPermissions(Actions.Create, "Test", permissions, Restriction.Challenges, ChallengeId))
            {
                Navi.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
            }
            Model = await HttpClient.GetFromJsonAsync<TestGeneratorModel<Result, Member>>($"/api/Test/GetTestGeneratorModel/{ChallengeId}");
        }

        ChallengeModel = await HttpClient.GetFromJsonAsync<ExtendedChallengeModel>($"api/challenge/getmodel/{Model.ChallengeId}");
        if (ChallengeModel == null)
        {
            Navi.NavigateTo("Challenges");
        }
        else if (Model.HasError)
        {
            Navi.NavigateTo($"Home/Error/{Model.Message}");
        }
        var id = 1;
        while (ChallengeModel.Tests.Any(x => x.Id == id))
        {
            id++;
        }
        Model.Test.Index = ChallengeModel.Tests.Count.ToString();
        Model.Test.Id = id;
        TestFolder = Domain.CreateFoldersForTest(ChallengeModel, Model.Test).Item1;
        Domain.FlatFiles = Model.Test.InputFiles;
        Model.SubmissionChangedEvent += StateHasChanged;
    }

    private async void CreateTest()
    {
        var responseMessage = await HttpClient.PostAsJsonAsync("api/Test/CreateTestWithTestGeneratorResult", Model);
        if (responseMessage.IsSuccessStatusCode)
        {
            var result = await responseMessage.Content.ReadFromJsonAsync<TestGeneratorModel<Result, Member>>();
            if (!result.HasError)
            {
                Model = result;
                UnHideConfirm();
            }
        }
    }

    private void UnHideConfirm()
    {
        Hidden = false;
        StateHasChanged();
    }

}
