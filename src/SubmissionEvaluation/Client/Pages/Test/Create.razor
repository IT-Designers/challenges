@page "/Test/Create/{challengeId}"
@using System.Net.Http.Json
@using SubmissionEvaluation.Client.Services
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Models.Shared

@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject FileExplorerDomain Domain
@inject NavigationManager Navi

<div>
    <div class="post-area">
        <div class="post-header">
            Neuen Test f√ºr Challenge "@Model.ChallengeId" erstellen
        </div>
        <div class="card-body challenge-creation-panel">
            <EditForm Model="@Model" OnValidSubmit="CreateTest" id="challengetestform">
                <InputText @bind-Value="@Model.ChallengeId"/>
                <InputText @bind-Value="@Model.Referer" hidden readonly/>
                <div class="card-body challenge-creation-panel">
                    <MessageHeader Model="Model"/>
                    @if (Folder != null && Folder.NewFilesInFolder.Count != 0)
                    {
                        <EditTestFieldsPartial Model="Model.Test" Input=InputFolder/>
                    }
                    <button id="btnCreate" name="command" type="submit" value="Create" class="btn btn-outline-dark btn-block text-center input-field-padding"><span class="oi oi-book"></span> Test erstellen</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string ChallengeId { get; set; }

    private ChallengeTestCreateModel Model { get; set; } = new ChallengeTestCreateModel();
    private EditTestFieldsPartial testFieldsPartial = new EditTestFieldsPartial();
    private ExtendedChallengeModel ChallengeModel { get; set; }
    private Folder Folder { get; set; }
    private Folder InputFolder { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ChallengeId == null) NavigationManager.NavigateTo("/Challenges");
        Model.Referer = $"/Challenge/Edit/{ChallengeId}";
        Model.ChallengeId = ChallengeId;
        ChallengeModel = await HttpClient.GetFromJsonAsync<ExtendedChallengeModel>($"api/challenge/getmodel/{ChallengeId}");
        var permissions = await HttpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (!PermissionHelper.CheckPermissions(Actions.Create, "Test", permissions, Restriction.Challenges, ChallengeId))
        {
            Model.HasError = true;
            Model.Message = ErrorMessages.NoPermission;
        }
        if (ChallengeModel == null)
        {
            Navi.NavigateTo("Challenges");
        }
        else if (Model.HasError)
        {
            Navi.NavigateTo($"Home/Error/{Model.Message}");
        }
        var id = 1;
        while (ChallengeModel.Tests.Any(x => x.Id == id))
        {
            id++;
        }
        Model.Test = new ChallengeTest {Index = ChallengeModel.Tests.Count.ToString(), Id = id};
        Folder = Domain.CreateFoldersForTest(ChallengeModel, Model.Test).Item1;
        InputFolder = FileExplorerDomain.FetchFolder("Input", Folder);
        Domain.FlatFiles = Model.Test.InputFiles;
    }

    private async Task CreateTest()
    {
        ChallengeModel.NewFiles = Domain.ExtractFoldersToServerFiles(ChallengeModel.NewFiles);
        Domain.MapFilesToTest(ChallengeModel.NewFiles, Model.Test.InputFiles, Model.Test.Id.ToString());
        var responseMessage = await HttpClient.PostAsJsonAsync("api/Test/createtest/Create", Model);
        if (responseMessage.IsSuccessStatusCode)
        {
            var result = await responseMessage.Content.ReadFromJsonAsync<ChallengeTestCreateModel>();
            if (result.HasSuccess)
            {
                Model = result;
                responseMessage = await HttpClient.PostAsJsonAsync("api/Challenge/Edit/Save", ChallengeModel);
                if (responseMessage.IsSuccessStatusCode)
                {
                    ChallengeModel = await responseMessage.Content.ReadFromJsonAsync<ExtendedChallengeModel>();
                }
                NavigationManager.NavigateTo(Model.Referer);
            }
        }
    }

}
