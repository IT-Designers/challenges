@page "/Submission/Add/{challengename}"
@page "/Submission/Add/{challengename}/{submissionId}"
@using Member = SubmissionEvaluation.Contracts.ClientPocos.Member
@using SubmissionEvaluation.Client.Shared.Components.FileExplorer
@using SubmissionEvaluation.Shared.Models.Shared
@using Newtonsoft.Json
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject NavigationManager navi
@inject IToastService toaster
<style>
    .container { max-width: 1140px; }
</style>
<div class="row">
    <div class="col-lg-3">
        <div class="shadow-bottom-center" style="margin-bottom: 10px">
            <div class="categories-list-header" style="border-bottom: none">
                Bisherige Einreichungen
                <button @onclick="Reload" class="btn btn-primary">
                    <span class="oi oi-reload"></span>
                </button>
            </div>
            <SubmissionList @bind-Model="Model"/>
        </div>
    </div>
    <div class="post-area col-lg-9">
        <div class="post-header">
            @($" Lösung für \"{Model.ChallengeTitle}\" einreichen")
        </div>
        <div class="post">
            @if (Model.HasError || Model.HasSuccess)
            {
                <div class="card-body challenge-creation-panel">
                    <MessageHeader Model="Model"/>
                </div>
            }
            @if (string.IsNullOrWhiteSpace(Model.SubmissionId) || Model.SelectedSubmission == null)
            {
                <EditForm Model="Model" OnValidSubmit="@Upload">
                    <div class="row">
                        <input type="hidden" @bind="Model.Id"/>
                        <div id="uploadframe" class="col-8">
                            <div class="upload-area">
                                <DropDownZone @bind-Files="TempHolder" id="dropdownSubmission"/>

                                <div class="upload-area-text">

                                    <p>
                                        Dateien hereinziehen oder hier klicken, um Dateien auszuwählen (max. 12 Dateien).
                                    </p>
                                    <p>
                                        Alternativ kann auch eine Zip-Datei hier hochgeladen werden.
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="col-2">
                            <button id="emptyButton" class="btn btn-danger btn-block" type="button" @onclick="DiscardHolder">Leeren</button>
                        </div>
                        <div class="col-2">
                            <button id="uploadButton" type="submit" class="btn btn-block btn-success">Upload</button>
                        </div>
                    </div>
                </EditForm>
            }
            else
            {
                <FullTestInfo @bind-Model="Model" RatingMethodForSelectedSubmission="RatingMethodForSelectedSubmission"/>
            }
        </div>
    </div>
</div>


@code {

    [Parameter]
    public string ChallengeName { get; set; }

    [Parameter]
    public string submissionId { get; set; }

    public UploadModel<Result, Member> Model { get; set; } = new UploadModel<Result, Member>();
    private List<DetailedInputFile> TempHolder { get; set; } = new List<DetailedInputFile>();
    private RatingMethod RatingMethodForSelectedSubmission { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (submissionId == null)
        {
            Model = await httpClient.GetFromJsonAsync<UploadModel<Result, Member>>($"/api/Submission/Add/{ChallengeName}");
        }
        else
        {
            Model = await httpClient.GetFromJsonAsync<UploadModel<Result, Member>>($"/api/Submission/Add/{ChallengeName}/{submissionId}");
        }
        if (Model.HasError)
        {
            navi.NavigateTo($"Home/Error/{Model.Message}");
        }
        RatingMethodForSelectedSubmission = await httpClient.GetFromJsonAsync<RatingMethod>($"/api/Submission/GetRatingForSubmission/{ChallengeName}");
        StateHasChanged();
    }

    private async void Upload()
    {
        Model.UploadArchive = TempHolder;
        TempHolder = new List<DetailedInputFile>();
        var responseMessage = await httpClient.PostAsJsonAsync<List<DetailedInputFile>>($"api/Submission/UploadJSON/{ChallengeName}", Model.UploadArchive);
        if (responseMessage.IsSuccessStatusCode)
        {
            var result = await responseMessage.Content.ReadFromJsonAsync<GenericModel>();
            if (result.HasSuccess)
            {
                toaster.ShowSuccess(result.MessageTranslation, "Erfolgreicher Upload");
            }
            else
            {
                toaster.ShowError(result.MessageTranslation, "Upload fehlgeschlagen");
            }
        }
        Model = await httpClient.GetFromJsonAsync<UploadModel<Result, Member>>($"/api/Submission/Add/{ChallengeName}");
        StateHasChanged();
    }

    private void DiscardHolder()
    {
        TempHolder = new List<DetailedInputFile>();
        StateHasChanged();
    }

    private async void Reload()
    {
        if (submissionId == null)
        {
            Model = await httpClient.GetFromJsonAsync<UploadModel<Result, Member>>($"/api/Submission/Add/{ChallengeName}");
        }
        else
        {
            Model = await httpClient.GetFromJsonAsync<UploadModel<Result, Member>>($"/api/Submission/Add/{ChallengeName}/{submissionId}");
        }
        toaster.ShowInfo("Wurde neu geladen.");
        StateHasChanged();
    }

}
