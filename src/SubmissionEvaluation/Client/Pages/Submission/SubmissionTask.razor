@page  "/Submission/Task/{challengeName}"
@page "/Submission/Task/{challengeName}/{selectedSubmission}"

@using System.Net.Http.Json
@using Member = SubmissionEvaluation.Contracts.ClientPocos.Member
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages

@inject HttpClient HttpClient
@inject NavigationManager Navi

@if (Model != null)
{
    <div class="post-area">
        <div class="post-header">
            Bisherige Einreichungen zur Challenge "@ChallengeName"
        </div>
        <div class="card-body challenge-creation-panel">
            <div class="card-body challenge-creation-panel">
                <partial name="MessageHeader"/>
                <div class="row">
                    <div class="col-12">
                        @if (Model.Submissions != null && Model.Submissions.Count == 0)
                        {
                            <h4>
                                Es gibt bisher keine Einreichungen zu dieser Challenge.
                            </h4>
                        }
                        else
                        {
                            if (Model.ErrorDetails != null)
                            {
                                <DetailedTestInfo Detail="Model.ErrorDetails"/>
                            }
                            <table class="ranking_table table">
                                <thead>
                                <tr class="ranking_head">
                                    <th class="th_name">Einreichdatum</th>
                                    <th class="th_name">User</th>
                                    <th class="th_name">Sprache</th>
                                    <th class="th_name">Ergebnis</th>
                                    <th class="th_name">Ausführzeit</th>
                                    <th class="th_name">Reviewergebnis</th>
                                    <th class="th_name">Source</th>
                                    <th class="th_name">Aktionen</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var submission in Model.Submissions)
                                {
                                    <tr style="background-color: @(submission.NowFailing ? "lightyellow" : "white")">
                                        <td>@submission.SubmissionDate</td>
                                        <td>@submission.Member.Name</td>
                                        <td>@submission.Language</td>
                                        <td>
                                            @submission.State
                                        </td>
                                        <td>
                                            @if (submission.ExecutionDuration.HasValue)
                                            {
                                                @(submission.ExecutionDuration + " ms")
                                            }
                                        </td>
                                        <td>
                                            <img src="@($"/images/{(submission.IsPassed ? "rating_star" + submission.ReviewResult : "rating_unsolved")}.png")" style="height: 32px; width: 32px;"/>
                                        </td>
                                        <td>
                                            @if (PermissionHelper.CheckPermissions(Actions.View, "Submissions", Permissions, Restriction.Challenges, ChallengeName))
                                            {
                                                <DownloadComponent Class="btn" Title="Download" Content='<span class="oi oi-data-transfer-download"></span>' Id="@Model.Id" SubId="@submission.Id" TwoIds="true" Url="api/Submission/Download" FileName=@($"{submission.Id}.zip")/>
                                                <a href="/Submission/View/@Model.Id/@submission.Id" class="btn" title="Ansehen">
                                                    <span class="oi oi-eye"></span>
                                                </a>
                                            }
                                        </td>
                                        <td>
                                            @if (!submission.IsPassed)
                                            {
                                                <button @onclick="() => OpenTestDetails(submission.Id)" class="btn" title="Details ansehen">
                                                    <span class="oi oi-eye"></span>
                                                </button>
                                            }
                                            <button @onclick="() => RerunSubmission(submission.Id)" class="btn" title="Wiederholen">
                                                <span class="oi oi-action-redo"></span>
                                            </button>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                            <a @onclick="RerunAllSubmissions" class="btn btn-outline-dark">
                                Alle Einreichungen Testen
                            </a>
                            <a @onclick="RemoveDeadSubmissions" class="btn btn-outline-dark">
                                Entferne alte/fehlerhafte Einreichungen
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public string ChallengeName { get; set; }

    [Parameter]
    public string SelectedSubmission { get; set; }

    SubmissionHistoryModel<Member> Model { get; set; }
    Permissions Permissions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Permissions = await HttpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (!PermissionHelper.CheckPermissions(Actions.View, "Submissions", Permissions, Restriction.Challenges, ChallengeName))
        {
            Navi.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
        }
        Model = await HttpClient.GetFromJsonAsync<SubmissionHistoryModel<Member>>($"api/Submission/returnAllSubmissions/{ChallengeName}/{SelectedSubmission}");
        CheckForErrors();
        StateHasChanged();
    }

    private async void OpenTestDetails(string selectedSubmission)
    {
        Model = await HttpClient.GetFromJsonAsync<SubmissionHistoryModel<Member>>($"api/Submission/returnAllSubmissions/{Model.Id}/{selectedSubmission}");
        StateHasChanged();
    }

    private async void RerunSubmission(string selectedSubmission)
    {
        var responseMessage = await HttpClient.PostAsJsonAsync($"api/Submission/RerunSubmission/{Model.Id}/{selectedSubmission}", true);
        if (responseMessage.IsSuccessStatusCode)
        {
            Model = await responseMessage.Content.ReadFromJsonAsync<SubmissionHistoryModel<Member>>();
        }
        CheckForErrors();
        StateHasChanged();
    }

    private async void RerunAllSubmissions()
    {
        var responseMessage = await HttpClient.PostAsJsonAsync("api/Submission/RerunAllSubmissions", Model.Id);
        if (responseMessage.IsSuccessStatusCode)
        {
            Model = await responseMessage.Content.ReadFromJsonAsync<SubmissionHistoryModel<Member>>();
        }
        CheckForErrors();
        StateHasChanged();
    }

    private async void RemoveDeadSubmissions()
    {
    //Though this is deleting old failed submissions, it´s modifying the model with it. Cause the method server side returns the model, this is the view to be taken and it is a post.
        var responseMessage = await HttpClient.PostAsJsonAsync("api/Submission/RemoveDeadSubmissions", Model.Id);
        if (responseMessage.IsSuccessStatusCode)
        {
            Model = await responseMessage.Content.ReadFromJsonAsync<SubmissionHistoryModel<Member>>();
        }
        StateHasChanged();
    }

    private void CheckForErrors()
    {
        if (Model.HasError)
        {
            Navi.NavigateTo($"Home/Error/{Model.Message}");
        }
    }

}
