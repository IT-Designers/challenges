@page  "/Submission/Task/{challengeName}"
@page "/Submission/Task/{challengeName}/{selectedSubmission}"

@using System.Net.Http.Json
@using Member = SubmissionEvaluation.Contracts.ClientPocos.Member
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages
@using SubmissionEvaluation.Client.Shared.Components.Table
@using System.ComponentModel

@inject HttpClient HttpClient
@inject NavigationManager Navi

@if (Model != null)
{
    <div class="post-area">
        <div class="post-header">
            Bisherige Einreichungen zur Challenge "@ChallengeName"
        </div>
        <div class="card-body challenge-creation-panel">
            <div class="card-body challenge-creation-panel">
                <partial name="MessageHeader"/>
                <div class="row">
                    <div class="col-12">

                        @if (Model?.ErrorDetails != null)
                        {
                            <DetailedTestInfo Detail="Model.ErrorDetails"/>
                        }

                        <Table TEntry="SubmissionResult<Member>" Entries="Model?.Submissions" NoEntriesText="Keine Einreichungen vorhanden." SearchEnabled="true" RowColor="@(context => context.NowFailing ? "lightyellow" : "white")">
                            <Column TEntry="SubmissionResult<Member>" Header="Einreichdatum" Value="@(context => context.SubmissionDate)" StringValue="@(context => context.SubmissionDate.ToShortDateString())" SortDirection="ListSortDirection.Descending"/>
                            <Column TEntry="SubmissionResult<Member>" Header="User" StringValue="@(context => context.Member.Name)"/>
                            <Column TEntry="SubmissionResult<Member>" Header="Sprache" StringValue="@(context => context.Language)"/>
                            <Column TEntry="SubmissionResult<Member>" Header="Ergebnis" StringValue="@(context => context.State)"/>
                            <Column TEntry="SubmissionResult<Member>" Header="Ausführzeit" Value="@(context => context.ExecutionDuration)"  StringValue="@(context => context.ExecutionDuration.HasValue ? $"{context.ExecutionDuration} ms" : "")"/>
                            <Column TEntry="SubmissionResult<Member>" Header="Reviewergebnis"  Value="@(context => context.ReviewResult)" StringValue="@(context => context.ReviewResult.ToString())">
                                <img src="@($"/images/{(context.IsPassed ? "rating_star" + context.ReviewResult : "rating_unsolved")}.png")" style="height: 32px; width: 32px;"/>
                            </Column>
                            <Column TEntry="SubmissionResult<Member>" Header="Source">
                                @if (PermissionHelper.CheckPermissions(Actions.View, "Submissions", Permissions, Restriction.Challenges, ChallengeName))
                                {
                                    <DownloadComponent Class="btn" Title="Download" Content='<span class="oi oi - data - transfer - download"></span>' Id="@Model.Id" SubId="@context.Id" TwoIds="true" Url="api/Submission/Download" FileName=@($"{context.Id}.zip")/>
                                    <a href="/Submission/View/@Model.Id/@context.Id" class="btn" title="Ansehen">
                                        <span class="oi oi-eye"></span>
                                    </a>
                                }
                            </Column>
                            <Column TEntry="SubmissionResult<Member>" Header="Aktionen">
                                @if (!context.IsPassed)
                                {
                                    <button @onclick="() => OpenTestDetails(context.Id)" class="btn" title="Details ansehen">
                                        <span class="oi oi-eye"></span>
                                    </button>
                                }
                                <button @onclick="() => RerunSubmission(context.Id)" class="btn" title="Wiederholen">
                                    <span class="oi oi-action-redo"></span>
                                </button>
                            </Column>
                        </Table>

                        @if (Model?.Submissions?.Any() == true)
                        {
                            <a @onclick="RerunAllSubmissions" class="btn btn-outline-dark">
                                Alle Einreichungen Testen
                            </a>
                            <a @onclick="RemoveDeadSubmissions" class="btn btn-outline-dark">
                                Entferne alte/fehlerhafte Einreichungen
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public string ChallengeName { get; set; }

    [Parameter]
    public string SelectedSubmission { get; set; }

    SubmissionHistoryModel<Member> Model { get; set; }
    Permissions Permissions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Permissions = await HttpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (!PermissionHelper.CheckPermissions(Actions.View, "Submissions", Permissions, Restriction.Challenges, ChallengeName))
        {
            Navi.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
        }
        Model = await HttpClient.GetFromJsonAsync<SubmissionHistoryModel<Member>>($"api/Submission/returnAllSubmissions/{ChallengeName}/{SelectedSubmission}");
        CheckForErrors();
        StateHasChanged();
    }

    private async void OpenTestDetails(string selectedSubmission)
    {
        Model = await HttpClient.GetFromJsonAsync<SubmissionHistoryModel<Member>>($"api/Submission/returnAllSubmissions/{Model.Id}/{selectedSubmission}");
        StateHasChanged();
    }

    private async void RerunSubmission(string selectedSubmission)
    {
        var responseMessage = await HttpClient.PostAsJsonAsync($"api/Submission/RerunSubmission/{Model.Id}/{selectedSubmission}", true);
        if (responseMessage.IsSuccessStatusCode)
        {
            Model = await responseMessage.Content.ReadFromJsonAsync<SubmissionHistoryModel<Member>>();
        }
        CheckForErrors();
        StateHasChanged();
    }

    private async void RerunAllSubmissions()
    {
        var responseMessage = await HttpClient.PostAsJsonAsync("api/Submission/RerunAllSubmissions", Model.Id);
        if (responseMessage.IsSuccessStatusCode)
        {
            Model = await responseMessage.Content.ReadFromJsonAsync<SubmissionHistoryModel<Member>>();
        }
        CheckForErrors();
        StateHasChanged();
    }

    private async void RemoveDeadSubmissions()
    {
    //Though this is deleting old failed submissions, it´s modifying the model with it. Cause the method server side returns the model, this is the view to be taken and it is a post.
        var responseMessage = await HttpClient.PostAsJsonAsync("api/Submission/RemoveDeadSubmissions", Model.Id);
        if (responseMessage.IsSuccessStatusCode)
        {
            Model = await responseMessage.Content.ReadFromJsonAsync<SubmissionHistoryModel<Member>>();
        }
        StateHasChanged();
    }

    private void CheckForErrors()
    {
        if (Model.HasError)
        {
            Navi.NavigateTo($"Home/Error/{Model.Message}");
        }
    }

}
