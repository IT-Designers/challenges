@page "/Submission/View/{ChallengeName}/{SelectedSubmission}"
@using System.Net.Http.Json
﻿@using SubmissionEvaluation.Shared.Models.Submission
@inject HttpClient httpClient
@inject IJSRuntime runtime
@inject NavigationManager navi
<scripts>
    <link rel="stylesheet" href="css/review.css"/>
</scripts>
@if (Model != null)
{
    <div class="post-area">
        <div class="post-header">
            Submission-Quellcode für Challenge "@Model.ChallengeId"
        </div>
        <div class="card-body challenge-creation-panel">
            <div class="row">
                <div class="col-sm-3 col-12 side-menu">
                    @foreach (var item in Model?.SubmissionFilePaths)
                    {
                        <button type="submit" id="btnSource_@GetFileName(item)" class="btn-block" name="filePath" value="@item" @onclick="() => SetCurrentFile(item)"> @GetFileName(item)</button>
                    }
                </div>
                <div class="col-sm-9 col-12 editor-wrapper">
                    <input hidden readonly value="@Model.CurrentFile.FileName" id="FileName"/>
                    <b style="display: block">Ansicht für @Model.CurrentFile.FileName</b>
                    <div id="editor">@Model.CurrentFile.FileContent string</div>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string ChallengeName { get; set; }

    [Parameter]
    public string SelectedSubmission { get; set; }

    private SubmissionViewModel Model { get; set; }

    protected override async void OnInitialized()
    {
        Model = await httpClient.GetFromJsonAsync<SubmissionViewModel>($"api/Submission/ViewSubmission/{ChallengeName}/{SelectedSubmission}");
        CheckForErrors();
        StateHasChanged();
        await runtime.InvokeVoidAsync("reloadEditor", Model.CurrentFile.FileName, Model.CurrentFile.FileContent);
    }

    private async void SetCurrentFile(string item)
    {
    //The below is a get, but you need to give the file as model, cause otherwise it blocks.
        var responseMessage = await httpClient.PostAsJsonAsync<string>($"api/Submission/GetCurrentFile/{ChallengeName}/{SelectedSubmission}", item);
        if (responseMessage.IsSuccessStatusCode)
        {
            Model = await responseMessage.Content.ReadFromJsonAsync<SubmissionViewModel>();
        }
        CheckForErrors();
        StateHasChanged();
        await runtime.InvokeVoidAsync("reloadEditor", Model.CurrentFile.FileName, Model.CurrentFile.FileContent);
    }

    private string GetFileName(string input)
    {
        var parts = input.Split('\\', '/');
        return parts[parts.Length - 1];
    }

    private void CheckForErrors()
    {
        if (Model.HasError)
        {
            navi.NavigateTo($"Home/Error/{Model.Message}");
        }
    }

    //TODO: Optional: Remove js by blazor.
}
