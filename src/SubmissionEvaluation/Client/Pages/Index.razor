@inject HttpClient HttpClient
@page "/Account/View"
@page "/"

@using System.Net.Http.Json
@using SubmissionEvaluation.Client.Shared.Components.Account

<div class="row">
    <ProfileHeader Features="Features" Model="Model"/>

    <div class="col-12">
        <div class="post-area post">
            <div>
                <ProfileMenu Model="Model"/>
            </div>
            @if (Features != null && Model != null && CustomSettings != null && Achievements != null && Points != null)
            {
                @if (Features.EnableAchievements)
                {
                    <div>
                        <h3>Auszeichnungen</h3>
                    </div>
                    <div class="challenge-creation-panel">
                        @foreach (var achievement in Achievements)
                        {
                            CustomSettings.Achievements.TryGetValue(achievement.Id, out var config);
                            var title = config?.Title ?? "Missing";
                            var description = config?.Description ?? "Missing";
                            if (Model.Achievements.TryGetValue(achievement.Id, out var award))
                            {
                                <img style="box-shadow: unset; padding-right: 4px" title="@title &nbsp; @award.Date&#013;@description" src="/images/Achievement@(achievement.Quality)On.png" width="36px"/>
                            }
                            else
                            {
                                <img style="box-shadow: unset; padding-right: 4px" title="@title &#013;@description" src="/images/Achievement@(achievement.Quality)Off.png" width="36px"/>
                            }
                        }
                    </div>
                }

                @if (Model.Groups.Any(x => x.RequiredPoints > 0))
                {
                    <div>
                        <h3>Fortschritt</h3>
                    </div>

                    @foreach (var group in Model.Groups.Where(x => x.RequiredPoints > 0))
                    {
                        var solved = Points.Where(x => group.AvailableChallenges.Length == 0 || group.AvailableChallenges.Contains(x.Challenge)).ToList();
                        var collectedPoints = solved.Count == 0 ? 0 : solved.Sum(x => x.Points);
                        var requiredChallenges = collectedPoints == 0 || solved.Count == 0 ? group.RequiredPoints.Value : (int) Math.Ceiling(group.RequiredPoints.Value / (collectedPoints / (double) solved.Count));
                        <div class="row">
                            <div class="col form-group">
                                <label class="col-form-label">
                                    <span class="oi @(solved.Count >= requiredChallenges ? "oi-circle-check" : "oi-circle-x") "></span> @group.Title
                                </label>
                                <progress style="height: 0.8em;" value="@collectedPoints" max="@group.RequiredPoints"></progress>&nbsp;@($"[{solved.Count} von ~{requiredChallenges} Aufgaben]")
                            </div>
                        </div>
                    }
                }
                <div>
                    <h3>Benutzerdaten</h3>
                </div>
                <div class="row">
                    <div class="col form-group">
                        <label class="col-form-label" for="Mail"><span class="oi oi-account-login"></span> Benutzername</label>
                        <input value="@Model.Uid" readonly class="form-control"/>
                    </div>
                    <div class="col form-group">
                        <label class="col-form-label" for="Mail"><span class="oi oi-person"></span> Anzeigename</label>
                        <input value="@Model.Name" readonly class="form-control"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col form-group">
                        <label class="col-form-label" for="Mail"><span class="oi oi-envelope-closed"></span> E-Mail-Adresse</label>
                        <input value="@Model.Mail" readonly class="form-control"/>
                    </div>
                    <div class="col form-group">
                        <label class="col-form-label" for="Group"><span class="oi oi-tags"></span> Gruppen</label><br/>
                        <div style="display: flex;">
                            <input value='@string.Join(",", Model.Groups.Select(x => x.Title))' title="@string.Join(",", Model.Groups.Select(x=> x.Title))" readonly class="form-control col-sm-8"/>
                            @if (Model.CanChooseGroup)
                            {
                                <a href="Account/Groups" class="btn btn-outline-dark col-sm-3 ml-auto">Verwalten</a>
                            }
                        </div>
                    </div>
                </div>
                <div class="row">
                    @if (Model.Roles.Count > 0)
                    {
                        <div class="col form-group">
                            <label class="col-form-label" for="Mail"><span class="oi oi-people"></span> Rollen</label><br/>
                            <input value='@string.Join(",", Model.Roles)' readonly class="form-control"/>
                        </div>
                    }
                </div>
                <div class="input-field-padding">
                    @if (!Features.EnableLdap)
                    {
                        <a href="Account/ChangePassword" class="btn btn-outline-dark btn-margin col-sm-3 col-6 ml-auto">Passwort Ã¤ndern</a>
                    }
                    <a href="Account/UpdateSettings" class="btn btn-outline-dark btn-margin col-sm-3 ml-auto">Nutzerdaten bearbeiten</a>
                </div>
            }
        </div>
    </div>
</div>

@code {
    SettingsModel Model { get; set; }
    FeatureSettings Features { get; set; }
    CustomizationSettingsClient CustomSettings { get; set; }
    List<Achievement> Achievements { get; set; }
    List<SubmitterRankingEntry> Points { get; set; }

    protected override async void OnInitialized()
    {
        Model = await HttpClient.GetFromJsonAsync<SettingsModel>("api/Account/getusersettings");
        Features = await HttpClient.GetFromJsonAsync<FeatureSettings>("api/Account/getSettings");
        CustomSettings = await HttpClient.GetFromJsonAsync<CustomizationSettingsClient>("api/Account/GetCustomSettings");
        Achievements = await HttpClient.GetFromJsonAsync<List<Achievement>>("api/Members/GetAchievements");
        Points = await HttpClient.GetFromJsonAsync<List<SubmitterRankingEntry>>("api/Account/PointsList");
        StateHasChanged();
    }

}
