@page "/Challenge/Edit/{id}"

@using System.Net.Http.Json
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages
@using SubmissionEvaluation.Client.Shared.Components
@using SubmissionEvaluation.Client.Shared.Components.Challenge

@inject HttpClient HttpClient
@inject NavigationManager Navi

<style>
    .consoleblock {
        background: #000 !important;
        border-width: 1px !important;
        color: #DDD !important;
        font-family: Menlo, Monaco, Consolas, "Courier New", monospace !important;
        font-size: 13px !important;
        line-height: 1.1 !important;
        padding: 9.5px !important;
    }
</style>

<h3>Aufgabe Bearbeiten</h3>
<div>
    <div class="post-area">
        @if (Model != null && Permissions != null)
        {
            <div class="post-header">
                Challenge "@Model.Id" bearbeiten
            </div>
            <div class="card-body challenge-creation-panel">
                <EditForm Model="@Model" Context="formContext">
                    <DataAnnotationsValidator/>
                    <MessageHeader Model="@Model"/>
                    @if (Model.HasChallengeError)
                    {
                        <div class="alert alert-danger" role="alert">
                            @Model.ChallengeErrorDescription
                        </div>
                    }
                    <div id="project-group" class="form-group">
                        <h4 class="col-form-label">ID (Ändern nicht mehr möglich)</h4>
                        @if (Permissions.IsAdmin)
                        {
                            <NavLink href=@($"Challenge/Rename/{Id}")>Umbenennen</NavLink>
                        }
                        <InputText @bind-Value="Model.Id" readonly="true" class="form-control"></InputText>
                        <EditChallengePartial Model="Model" @ref="partial"/>
                        <TestListPartial Model="@Model"/>
                    </div>


                    <button id="btnSave" name="command" type="submit" value="Save" class="btn btn-outline-dark btn-block text-center input-field-padding" @onclick='e => EditModelCallback(formContext, "Save")'><span class="oi oi-book"></span> Challenge speichern</button>
                    <button id="btnSaveAndClose" name="command" type="submit" value="SaveAndClose" class="btn btn-outline-dark btn-block text-center input-field-padding" @onclick='() => EditModelCallback(formContext, "SaveAndClose")'><span class="oi oi-book"></span> Challenge speichern und zurück</button>
                    @if (Model.IsDraft && !Model.HasChallengeError)
                    {
                        <button id="btnPublish" name="command" type="submit" value="Publish" class="btn btn-success btn-block text-center input-field-padding" @onclick='e => EditModelCallback(formContext, "Publish")'><span class="oi oi-pin"></span> Challenge veröffentlichen</button>
                    }
                </EditForm>
            </div>
        }
    </div>
</div>

@code {

    [Parameter]
    public string Id { get; set; }

    ExtendedChallengeModel Model { get; set; }
    Permissions Permissions { get; set; }
    EditChallengePartial partial;

    protected override async Task OnInitializedAsync()
    {
        Permissions = await HttpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (!PermissionHelper.CheckPermissions(Actions.Edit, "Challenges", Permissions, Restriction.Challenges, Id))
        {
            Navi.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
        }
        if (Id == null)
        {
            return;
        }

        Model = await HttpClient.GetFromJsonAsync<ExtendedChallengeModel>($"api/challenge/getmodel/{Id}");
        if (Model == null)
        {
            Navi.NavigateTo("Challenges");
        }
        else if (Model.HasError)
        {
            Navi.NavigateTo($"Home/Error/{Model.Message}");
        }
        StateHasChanged();
    }

    private async Task EditModelCallback(EditContext editContext, string command)
    {
        await partial.SaveEditor();
        var isValid = editContext.Validate();
        if (isValid)
        {
            var responseMessage = await HttpClient.PostAsJsonAsync($"api/Challenge/Edit/{command}", Model);
            if (responseMessage.IsSuccessStatusCode)
            {
                switch (command)
                {
                    case "Save":
                        Model = await responseMessage.Content.ReadFromJsonAsync<ExtendedChallengeModel>();
                        StateHasChanged();
                        break;
                    case "SaveAndClose":
                        Navi.NavigateTo("/Challenges/EditSuccess");
                        break;
                    case "Publish":
                        Navi.NavigateTo("/Challenges/PublishSuccess");
                        break;
                }
            }
            StateHasChanged();
        }
    }

}
