@page "/Challenge/Overlook"
@using System.Net.Http.Json

@using SubmissionEvaluation.Client.Shared.Components.Challenge
@using Member = SubmissionEvaluation.Contracts.ClientPocos.Member

@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Classes.Messages

@inject HttpClient HttpClient
@inject NavigationManager Navi

@if (CategoryStats != null && Bundles != null)
{
    @foreach (var category in CategoryStats)
    {
        <div class="post-area">
            <div class="post-header">
                <a href="@($"Challenge/Category/{category.Key}")" style="color: #000">@category.Key</a>
            </div>
            <div class="post-list-body">
                <div class="all-posts" post-cate="All">
                    @{
                        @foreach (var entry in category.Value)
                        {
                            if (entry.Id != null)
                            {
                                <ChallengeTile Entry="entry" Member="new Member()" Bundles="Bundles.Where(x => x.Category.Equals(category.Key)).ToList()"/>
                            }
                        }
                    }
                </div>
                <div style="clear: both"></div>
            </div>
        </div>
    }
}
else {
    <Wave />
}

@code {
    public Dictionary<string, List<CategoryListEntryExtendedModel>> CategoryStats { get; set; }
    public List<BundleModel> Bundles { get; set; }

    protected override async void OnInitialized()
    {
        var permissions = await HttpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (PermissionHelper.CheckPermissions(Actions.View, "ChallengeOverview", permissions))
        {
            CategoryStats = await HttpClient.GetFromJsonAsync<Dictionary<string, List<CategoryListEntryExtendedModel>>>("api/Challenge/GetAllChallengesAdminView");
            Bundles = await HttpClient.GetFromJsonAsync<List<BundleModel>>("api/Bundle/GetAllBundlesAdminView");
            StateHasChanged();
        }
        else
        {
            Navi.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
        }
    }

}
