@page "/Challenge/View/{challengeId}"

@using System.Net.Http.Json
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Classes
@using SubmissionEvaluation.Shared.Models.Members
@using Member = SubmissionEvaluation.Contracts.ClientPocos.Member

@inject HttpClient HttpClient
@inject NavigationManager Navi
@inject IJSRuntime Runtime

@if (Model != null)
{
    <div class="row">
        <div class="col-lg-9">
            <div class="post-area">
                <div class="post-header">
                    <h1>
                        @Model?.Title
                        @if (Model.IsDraft)
                        {
                            @("PREVIEW/BETA")
                        }
                        @if (PermissionHelper.CheckPermissions(Actions.Edit, "Challenges", Permissions, Restriction.Challenges, ChallengeId))
                        {
                            <a class="btn btn-sm" href="@("Challenge/Edit/" + Model.Id)" style="padding: 2px">
                                <span class="oi oi-pencil"></span>
                            </a>
                        }
                        @if (PermissionHelper.CheckPermissions(Actions.View, "Submissions", Permissions, Restriction.Challenges, ChallengeId))
                        {
                            <a class="btn btn-sm" href="@($"Submission/Task/{Model.Id}")"style="padding: 2px">
                                <span class="oi oi-list"></span>
                            </a>
                        }
                    </h1>
                    <p>
                        @("Basierend auf: ")
                        @if (Model?.Source == "none")
                        {
                            @("Ideen des Autors")
                        }
                        else if (!string.IsNullOrWhiteSpace(Model.Source))
                        {
                            if (Uri.TryCreate(Model.Source, UriKind.Absolute, out var uri))
                            {
                                <a href="@Model.Source">@(uri.Host)</a>
                            }
                            else
                            {
                                @Model.Source
                            }
                        }
                        else
                        {
                            @("Keine Angabe zur Quelle")
                        }
                    </p>
                    <p>
                        @if (Model?.PartOfGroups.Count > 1)
                        {
                            @("Bestandteil der Gruppen: ")
                            @string.Join(" und ", Model?.PartOfGroups)
                        }
                        else
                        {
                            @("Bestandteil der Gruppe: ")
                            @Model?.PartOfGroups.FirstOrDefault()
                        }
                    </p>

                    @if (!string.IsNullOrWhiteSpace(Model.Bundle))
                    {
                        <p>
                            @("Diese Aufgabe ist Teil der Aufgabenserie: ")<a href="@("Bundle/View/" + Model.Bundle)">@Model.BundleTitle</a>
                        </p>
                    }
                </div>
                @if (Model.CanRate)
                {
                    <div class="post">
                        <div class="row" style="background: lightgoldenrodyellow; border: 1px solid black;">
                            <div style="display: table; padding: 5px 3px;">
                                <div style="display: table-cell; font-weight: bold; vertical-align: middle; width: 20%;">Bewertung:</div>
                                <div style="display: table-cell; vertical-align: middle; width: 20%">
                                    <button @onclick="() => RateChallenge(RatingType.Good)" style="color: green" class="no-styling fake-link">
                                        <span class="oi oi-check" style="display: inline"></span><span style="display: inline-block; line-height: 1em; padding-left: 5px; vertical-align: middle; width: 80%;">Genau Richtig</span>
                                    </button>
                                </div>
                                <div style="display: table-cell; vertical-align: middle; width: 20%">
                                    <button @onclick="() => RateChallenge(RatingType.ToEasy)" style="color: orange" class="no-styling fake-link">
                                        <span class="oi oi-thumb-up" style="display: inline"></span><span style="display: inline-block; line-height: 1em; padding-left: 5px; vertical-align: middle; width: 80%;">Leichter als angegeben</span>
                                    </button>
                                </div>
                                <div style="display: table-cell; vertical-align: middle; width: 20%">
                                    <button @onclick="() => RateChallenge(RatingType.ToHard)" style="color: red" class="no-styling fake-link">
                                        <span class="oi oi-thumb-down" style="display: inline"></span><span style="display: inline-block; line-height: 1em; padding-left: 5px; vertical-align: middle; width: 80%;">Schwerer als angegeben</span>
                                    </button>
                                </div>
                                <div style="display: table-cell; vertical-align: middle; width: 20%">
                                    <button @onclick="() => RateChallenge(RatingType.Unclear)" style="color: gray" class="no-styling fake-link">
                                        <span class="oi oi-question-mark" style="display: inline"></span><span style="display: inline-block; line-height: 1em; padding-left: 5px; vertical-align: middle; width: 80%;">Aufgabe war unverständlich</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                <div class="post">
                    @((MarkupString) MarkdownToHtml.Convert(Model.Description, fixStatic: true, id: ChallengeId))
                </div>
            </div>
        </div>

        <div class="col-lg-3">
            <div class="shadow-bottom-center" style="margin-bottom: 10px">
                <div class="categories-list-header" style="border-bottom: none">Daten</div>
                <table class="challenge-data">
                    <tr>
                        <th class="d-lg-none d-xl-table-cell">Schwierigkeit:</th>
                        <td>
                            <div class="challengeTileLevelBack">
                                @if (Model.DifficultyRating == null)
                                {
                                    <div class="challengeTileLevelUnknown"> ? </div>
                                }
                                else
                                {
                                    <div class="challengeTileLevelKnown" style="background: @Model.DifficultyRatingColor; left: @(Model.DifficultyRating - 2)%;"></div>
                                }
                            </div>
                        </td>
                    </tr>
                    @if (!string.IsNullOrEmpty(Model.LearningFocus))
                    {
                        <tr>
                            <th class="d-lg-none d-xl-table-cell">Lernfokus:</th>
                            <td>
                                @Model.LearningFocus<br/>
                            </td>
                        </tr>
                    }
                    @if (Features.EnableRating)
                    {
                        <tr>
                            <th class="d-lg-none d-xl-table-cell" style="vertical-align: top;">Akt. Punkte:</th>
                            <td>
                                @Model.Points.Mid<br/><font size="1em">Schwierigkeitsabhängig</font>
                            </td>
                        </tr>
                    }
                    @if (Features.EnableEffortEstimation)
                    {
                        <tr>
                            <th class="d-lg-none d-xl-table-cell">Geschätzter Aufwand:</th>
                            <td>@Model.MinEffort - @Model.MaxEffort</td>
                        </tr>
                        <tr>
                            <th class="d-lg-none d-xl-table-cell">Modus:</th>
                            <td style="color: #@Model.RatingMethod.Color">@Model.RatingMethod.Title</td>
                        </tr>
                    }
                    <tr>
                        <th class="d-lg-none d-xl-table-cell">Kategorie:</th>
                        <td>
                            <a href="@("Challenge/Category/" + Model.Category)">@Model.Category</a>
                        </td>
                    </tr>
                    <tr>
                        <th class="d-lg-none d-xl-table-cell">Autor:</th>
                        <td>
                            <a href="mailto:@(Model.Author.Mail)?subject=Anfrage%20bezüglich%20@(Model.Title)">@(Model.Author.Name)</a>
                        </td>
                    </tr>
                    @if (Model.LastEditor.Name != Model.Author.Name)
                    {
                        <tr>
                            <th class="d-lg-none d-xl-table-cell">Letzter Bearbeiter:</th>
                            <td>
                                <a href="mailto:@(Model.LastEditor.Mail)?subject=Anfrage%20bezüglich%20@(Model.Title)">@(Model.LastEditor.Name)</a>
                            </td>
                        </tr>
                    }
                    <tr>
                        <th class="d-lg-none d-xl-table-cell">Veröffentlicht:</th>
                        <td>@Model.PublishDate.ToShortDateString()</td>
                    </tr>
                    <tr>
                        <th class="d-lg-none d-xl-table-cell" style="vertical-align: top;">Sprachen:</th>
                        <td>
                            <font size="1.2em">@Model.Languages</font>
                        </td>
                    </tr>
                    @if (!string.IsNullOrWhiteSpace(Model.Features))
                    {
                        <tr>
                            <th class="d-lg-none d-xl-table-cell" style="vertical-align: top;">Themengebiete:</th>
                            <td>
                                <font size="1.2em">@Model.Features</font>
                            </td>
                        </tr>
                    }
                </table>
                <div class="content-text" style="text-align: center;">
                    <a class="btn btn-outline-dark btn-margin" href="@($"Submission/Add/{Model.Id}")">Lösung einreichen</a>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        @if (Model.RatingMethod.Type != RatingMethod.Fixed)
        {
            <div class="col-lg-9">
                <div class="post-area">
                    <div class="post-header">
                        <h2>Ranking</h2>
                    </div>
                    <div class="post">
                        <table class="ranking_table">
                            <thead>
                            <tr class="ranking_head">
                                <th>Name</th>
                                <th>Punkte</th>
                                <th>Sprache</th>
                                @if (Model.RatingMethod.Type == RatingMethod.ExecTime)
                                {
                                    <th>Zeit</th>
                                }
                                @if (Model.RatingMethod.Type == RatingMethod.SubmissionTime)
                                {
                                    <th>Datum</th>
                                }
                                @if (Model.RatingMethod.Type == RatingMethod.Score)
                                {
                                    <th>Wertung</th>
                                }
                            </tr>
                            </thead>
                            @foreach (var submitter in Model.Ranklist.Submitters)
                            {
                                <tr>
                                    <td>
                                        <a href="@("Members/Member/" + submitter.Id)">@(Model.SubmitterIdToSubmitterName[submitter.Id])</a>
                                    </td>
                                    <td>
                                        @if (submitter.Points > 0)
                                        {
                                            @submitter.Points
                                        }
                                        else
                                        {
                                            @("-")
                                        }
                                    </td>
                                    <td>
                                        <a href="/Help/Compilers">@submitter.Language</a>
                                        @if (submitter.MoreLanguages?.Any() == true)
                                        {
                                            <small>
                                                <i title="@string.Join(", ", submitter.MoreLanguages)">more</i>
                                            </small>
                                        }
                                    </td>
                                    @if (Model.RatingMethod.Type == RatingMethod.ExecTime)
                                    {
                                        <td>@submitter.Exectime ms</td>
                                    }
                                    @if (Model.RatingMethod.Type == RatingMethod.SubmissionTime)
                                    {
                                        <td>@submitter.Date</td>
                                    }
                                    @if (Model.RatingMethod.Type == RatingMethod.Score)
                                    {
                                        <td>@submitter.CustomScore</td>
                                    }
                                </tr>
                            }
                        </table>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="col-lg-9">
                <div class="post-area">
                    <div class="post-header">
                        <h2>Erfolgreiche Lösungen</h2>
                    </div>
                    <div class="post">
                        <table class="ranking_table">
                            <thead>
                            <tr class="ranking_head">
                                <th>Sprache</th>
                                <th>Anzahl</th>
                            </tr>
                            </thead>
                            @foreach (var count in Model.Ranklist.SolvedCount)
                            {
                                <tr>
                                    <td>@count.Key</td>
                                    <td>
                                        @if (PermissionHelper.CheckPermissions(Actions.View, "Submissions", Permissions, Restriction.Challenges, ChallengeId))
                                        {
                                            <a href=@($"Submission/Task/{Model.Id}")>@count.Value</a>
                                        }
                                        else
                                        {
                                            @count.Value
                                        }
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <Wave />
}

@code {

    [Parameter]
    public string ChallengeId { get; set; }

    private Permissions Permissions { get; set; }
    private ChallengeViewModel Model { get; set; }
    FeatureSettings Features { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await HttpClient.GetFromJsonAsync<ChallengeViewModel>("api/Challenge/GetViewModel/" + ChallengeId);
        if (Model.HasError)
        {
            Navi.NavigateTo($"Home/Error/{Model.Message}");
        }
        Permissions = await HttpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        Features = await HttpClient.GetFromJsonAsync<FeatureSettings>("api/Account/getSettings");
    }

    async void RateChallenge(RatingType rating)
    {
        await HttpClient.PostAsJsonAsync($"api/Challenge/RateChallenge/{Model.Id}", rating);
        Model.CanRate = false;
        StateHasChanged();
    }

}
