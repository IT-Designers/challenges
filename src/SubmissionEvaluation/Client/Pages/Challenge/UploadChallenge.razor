@page "/Challenge/UploadChallenge" 
@using System.IO
@using System.Net.Http.Json
@using SubmissionEvaluation.Shared.Models.Shared
@using SubmissionEvaluation.Shared.Classes.Messages
@using SubmissionEvaluation.Shared.Models.Permissions
@using SubmissionEvaluation.Shared.Classes 
@inject HttpClient httpClient
@inject IToastService toaster
@inject NavigationManager navi 
<div>
    <div class="post-area">
        <div class="post-header">
            Challenge hochladen
        </div>
        <EditForm Model="Model" OnValidSubmit="ChallengeUpload">
            <div class="form-group">
                <div class="col-md-10">
                    <p>Eine oder mehrere Challenges hochladen (empfohlen .zip - Dateien):</p>
                    <BlazorInputFile.InputFile OnChange="HandleFileInput" multiple name="files"/>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-10">
                    <input type="submit" value="Upload"/>
                </div>
            </div>
            <p>Existiert die Challenge nicht, wird sie neu angelegt und veröffentlicht. Ansonsten wird versucht bestehende Daten (z.B. Statistiken) beizubehalten.</p>
        </EditForm>
    </div>
</div>

@code {
    UploadChallengeModel Model { get; } = new UploadChallengeModel {Referer = "Challenge/Overview"};

    protected override async void OnInitialized()
    {
        var Permissions = await httpClient.GetFromJsonAsync<Permissions>("api/Members/Permissions");
        if (!PermissionHelper.CheckPermissions(Actions.CREATE, "Challenges", Permissions))
        {
            navi.NavigateTo($"Home/Error/{SubmissionEvaluation.Shared.Classes.Messages.ErrorMessages.NoPermission}");
        }
    }
    async void ChallengeUpload()
    {

        var res = await httpClient.PostAsJsonAsync<List<DetailedInputFile>>("api/Challenge/UploadChallenge", Model.UploadedFiles);
        if(res.IsSuccessStatusCode)
        {
            var result = await res.Content.ReadAsStringAsync();
            if(result.Equals(SuccessMessages.EditChallenge)) {
                toaster.ShowSuccess("Challenge wurde erfolgreich hochgeladen.");
                navi.NavigateTo("Challenges");
            }
        }
    }

    async void HandleFileInput(IFileListEntry[] files)
    {
        if (files != null)
        {
            foreach (var file in files)
            {
                var ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);
                var inputfile = new DetailedInputFile {Content = ms.ToArray(), Name = file.Name, LastModified = file.LastModified.ToString(), OriginalName = file.Name, IsDelete = false, IsFolder = false, Type = file.Type};
                Model.UploadedFiles = new List<DetailedInputFile>();
                Model.UploadedFiles.Add(inputfile);
            }
        }
    }

}
