@page "/Challenge/Rename/{Id}"

@using System.Net.Http.Json
@using SubmissionEvaluation.Shared.Classes.Messages

@inject HttpClient HttpClient
@inject NavigationManager Navi

<div class="post-area">
    <div class="post-header">
        Aufgabe umbenennen
    </div>
    <div class="card-body challenge-creation-panel">
        <MessageHeader Model="Model"/>
        <EditForm Model="Model" OnValidSubmit="RenameChallenge">
            <div>
                <label for="renameFromTextBox">Bisherige Challenge-ID</label>
                <InputText readonly id="renameFromTextBox" class="form-control" @bind-Value="Model.Name"/>
                <p id="renameFromHelpBlock" class="form-text text-muted">
                    Gibt die Challenge an, welche umbenannt werden soll.
                </p>
            </div>
            <div>
                <label for="renameToTextBox">Neue Challenge-ID</label>
                <InputText @bind-Value="Model.NewName" id="renameToTextBox" class="form-control"/>
                <p id="renameToHelpBox" class="form-text text-muted">
                    Gibt die neue Challenge-ID an.
                </p>
            </div>
            <button id="btnCopy" name="command" type="submit" value="copy" class="btn btn-outline-dark btn-block text-center input-field-padding"><span class="oi oi-book"></span> Challenge umbenennen</button>
        </EditForm>
    </div>
</div>

@code {

    [Parameter]
    public string Id { get; set; }

    RenameModel Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = new RenameModel {Name = Id, Referer = $"Challenge/Edit/{Id}"};
        var userSettings = await HttpClient.GetFromJsonAsync<SettingsModel>("api/Account/getusersettings");
        if (!userSettings.Roles.Contains("admin"))
        {
            Navi.NavigateTo($"Home/Error/{ErrorMessages.NoPermission}");
        }
        StateHasChanged();
    }

    async void RenameChallenge()
    {
        if (Model.Name != null && (Model.NewName != null) & !Model.Name.Equals(Model.NewName))
        {
            var responseMessage = await HttpClient.PostAsJsonAsync("api/Challenge/Rename", Model);
            if (responseMessage.IsSuccessStatusCode)
            {
                var success = await responseMessage.Content.ReadFromJsonAsync<bool>();
                if (!success)
                {
                    Model.HasError = true;
                    Model.Message = ErrorMessages.GenericError;
                }
                else
                {
                    Navi.NavigateTo($"Challenges/Edit/{Model.NewName}");
                }
            }
        }
        else
        {
            Model.HasError = true;
            Model.Message = ErrorMessages.MissingId;
            StateHasChanged();
        }
    }

}
