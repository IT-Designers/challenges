@page "/Account/ChangePassword"
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject NavigationManager navi
@using SubmissionEvaluation.Client.Services
@using SubmissionEvaluation.Shared.Classes.Messages
@inject PasswordRequirementsService pwService
@inject IToastService toaster

<div class="shadow text-center loginbox">
    <div class="card post-area">
        <div class="post-header">Passwort ändern</div>
        <div class="card-body">
            @if (Model != null)
            {
                <EditForm Model="Model" OnValidSubmit="SendToServer">
                    <ValidationSummary />
                    <DataAnnotationsValidator />
                    <MessageHeader Model="Model" />
                    <div class="form-group has-feedback">
                        <i class="oi oi-account-logout form-control-feedback"></i><label class="col-form-label">Altes Passwort</label>
                        <input type="password" @bind-value="Model.OldPassword" class="form-control" placeholder="Passwort" />
                    </div>
                    <div class="form-group has-feedback">
                        <i class="oi oi-account-login form-control-feedback"></i><label class="col-form-label">Neues Passwort</label>
                        <input type="password" @bind-value="Model.Password" class="form-control" placeholder="Passwort" />
                    </div>
                    <div class="form-group has-feedback">
                        <i class="oi oi-account-login form-control-feedback"></i><label class="col-form-label">Neues Passwort (Bestätigung)</label>
                        <input type="password" @bind-value="Model.ConfirmPassword" class="form-control" placeholder="Passwort" />
                    </div>
                    <ValidationMessage For="() => Model.OldPassword" class="text-danger" />
                    <ValidationMessage For="() => Model.Password" class="text-danger" />
                    <ValidationMessage For="() => Model.ConfirmPassword" class="text-danger" />
                    <div>
                        <ol style="list-style-type: none; padding-left: 33%; text-align: left;">
                            <li style="padding-bottom: 5px;">Passwort Anforderungen:</li>
                            <li id="pwLength" style="color: @colorLength">- min. 12 Zeichen</li>
                            <li id="pwUp" style="color: @colorUp">- min. ein Großbuchstabe</li>
                            <li id="pwLow" style="color: @colorLow">- min. ein Kleinbuchstabe</li>
                            <li id="pwDigit" style="color: @colorDigit">- min. eine Zahl</li>
                        </ol>
                    </div>
                    <hr />
                    <div>
                        <input id="Update" name="Update" type="submit" class="btn btn-warning" value="Aktualisieren" />
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    string colorLength { get; set; }

    string colorLow { get; set; }

    string colorUp { get; set; }

    string colorDigit { get; set; }

    ChangePasswordModel Model { get; set; } = new ChangePasswordModel();

    async void SendToServer()
    {
        // TODO: Error Messages anpassen und richtig auswerfen
        if (pwService.CheckRequirements(Model.Password) && Model.ConfirmPassword == Model.Password)
        {
            var res = await httpClient.PostAsJsonAsync<ChangePasswordModel>("api/Account/ChangePassword", Model);
            if (res.IsSuccessStatusCode)
            {
                Model = await res.Content.ReadFromJsonAsync<ChangePasswordModel>();
            }
            if (Model.HasSuccess)
            {
                navi.NavigateTo("Account/View");
            }
            else
            {
                StateHasChanged();
            }
        }
        else
        {
            string outputString = "";
            List<string> errorList = pwService.GetRequirementsString();
            Model.HasError = true;
            Model.Message = ErrorMessages.WrongUserPassword;
            outputString += Model.MessageTranslation + "\n";

            SetColorsToGreen();

            foreach (var error in errorList)
            {
                // this.GetType().GetField("myVar").GetValue(this)
                switch (error)
                {
                    case "lengthFalse":
                        Model.Message = ErrorMessages.PasswordWrongLength;
                        outputString += "\n -" + Model.MessageTranslation;
                        colorLength = "red";
                        break;
                    case "upperFalse":
                        Model.Message = ErrorMessages.PasswordNoUpper;
                        outputString += "\n -" + Model.MessageTranslation;
                        colorUp = "red";
                        break;
                    case "lowerFalse":
                        Model.Message = ErrorMessages.PasswordNoLower;
                        outputString += "\n -" + Model.MessageTranslation;
                        colorLow = "red";
                        break;
                    case "digitFalse":
                        Model.Message = ErrorMessages.PasswordNoDigit;
                        outputString += "\n -" + Model.MessageTranslation;
                        colorDigit = "red";
                        break;
                    default:
                        break;
                }
            }

            toaster.ShowError(outputString, "Passwortfehler");
            StateHasChanged();
        }
    }

    void SetColorsToGreen()
    {
        colorLength = "green";
        colorUp = "green";
        colorLow = "green";
        colorDigit = "green";
    }
}
