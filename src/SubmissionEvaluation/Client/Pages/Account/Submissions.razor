@page "/Account/Submissions"
@using System.Net.Http.Json
@using SubmissionEvaluation.Client.Services
@using Challenge = SubmissionEvaluation.Contracts.ClientPocos.Challenge
@using SubmissionEvaluation.Client.Shared.Components.Table
@using System.ComponentModel

@inject HttpClient httpClient
@inject HelperService help

<div class="row">
    <ProfileHeader Model="Model" Features="Features"/>

    <div class="col-12">
        <div class="post-area post">
            <div>
                <ProfileMenu Model="Model"/>
            </div>

            <Table TEntry="Challenge" Entries="Model?.Challenges" TableClass="table table-sm table-submissions" TheadClass="thead-light thead-vertical" Caption="Einreichungen" NoEntriesText="Keine Einreichungen vorhanden." SearchEnabled="true">
                <Column TEntry="Challenge" Header="Schwierigkeit" Value="@(context => context.State?.DifficultyRating ?? int.MaxValue)" TextAlignment="TextAlignment.Right" SortDirection="ListSortDirection.Ascending">
                    <span style="color: @help.CalculateDifficultyColor(context.State.DifficultyRating); font-size: small">
                        @if (context.State.DifficultyRating.HasValue)
                        {
                            @($"{context.State.DifficultyRating}%")
                        }
                        else
                        {
                            @((MarkupString)"?")
                        }
                    </span>
                </Column>
                <Column TEntry="Challenge" Header="Name" StringValue="@(context => context.Title)">
                    <a href=@($"Challenge/View/{context.Id}")>@context.Title</a>
                </Column>
                @foreach (var compiler in Model?.Compilers ?? Enumerable.Empty<string>())
                {
                    <Column TEntry="Challenge" Header="@compiler" Value="@(context => GetStarsForLanguage(compiler, context) ?? int.MinValue)" TextAlignment="TextAlignment.Center">
                        @{
                            var state = GetSolvedStateForLanguage(compiler, context);

                            switch (state)
                            {
                                case SolvedState.Solved:
                                    <a href="@($"Submission/Add/{context.Id}")" class="@(GetStarsForLanguage(compiler, context) is null ? "rating_missing" : "rating_solved" + GetStarsForLanguage(compiler, context))" style="display: block; height: 32px; width: 32px;"></a>
                                    break;
                                case SolvedState.Failed:
                                    <a href=@($"Submission/Add/{context.Id}") class="rating_unsolved" style="display: block; height: 32px; width: 32px;"></a>
                                    break;
                                case SolvedState.NotTried:
                                default:
                                    @((MarkupString)"-")
                                    break;
                            }
                        }
                    </Column>
                }
            </Table>
        </div>
    </div>
</div>

@code {
    MemberSolvedModel<Challenge> Model { get; set; }
    FeatureSettings Features { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await httpClient.GetFromJsonAsync<MemberSolvedModel<Challenge>>("api/Account/Submissions");
        Features = await httpClient.GetFromJsonAsync<FeatureSettings>("api/Account/getSettings");

        StateHasChanged();
    }

    private SolvedInfo GetSolvedInfoForLanguage(string language, IChallenge challenge)
    {
        Model.Solved.TryGetValue(challenge.Id, out var challengeInfo);
        SolvedInfo solvedInfo = null;
        challengeInfo?.TryGetValue(language, out solvedInfo);
        return solvedInfo;
    }

    private SolvedState GetSolvedStateForLanguage(string language, IChallenge challenge)
    {
        return GetSolvedInfoForLanguage(language, challenge)?.State ?? SolvedState.NotTried;
    }

    private int? GetStarsForLanguage(string language, IChallenge challenge)
    {
        return GetSolvedInfoForLanguage(language, challenge)?.Stars;
    }
}
