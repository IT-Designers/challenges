@page "/Account/Activities"
@using System.Net.Http.Json
@using Member = SubmissionEvaluation.Contracts.ClientPocos.Member
@using SubmissionEvaluation.Shared.Models.Members
@using SubmissionEvaluation.Client.Shared.Components.Table
@using System.ComponentModel

@inject HttpClient httpClient
@inject NavigationManager navigationManager

<div class="row">
    <ProfileHeader Model="Model" Features="Features"/>

    <div class="col-12">
        <div class="post-area post">
            <div>
                <ProfileMenu Model="Model"/>
            </div>

            <Table TEntry="HistoryEntry" Entries="Model?.History" SearchEnabled="true" RowColor="GetRowColor">
                <Column TEntry="HistoryEntry" Header="Datum" Value="@(context => context.Date)" StringValue="@(context => context.Date.ToShortDateString())" SortDirection="ListSortDirection.Descending"/>
                <Column TEntry="HistoryEntry" Header="Challenge" StringValue="@(context => context.Challenge)">
                    <a href=@($"Challenge/View/{context.Challenge}")>@context.Challenge</a>
                </Column>
                <Column TEntry="HistoryEntry" Header="Sprache" StringValue="@(context => context.Language)">
                    @if (!string.IsNullOrWhiteSpace(context.Language))
                    {
                        <a href="Help/ViewPage/Compilers">@context.Language</a>
                    }
                </Column>
                <Column TEntry="HistoryEntry" Header="Ergebnis" StringValue="@(GetResultValue)">
                    @if (context.Type == HistoryType.ChallengeSubmission)
                    {
                        <a href=@($"Submission/Add/{context.Challenge}/{context.Id}")>@GetResultValue(context)</a>
                    }
                    else
                    {
                        @GetResultValue(context)
                    }
                </Column>
            </Table>
        </div>
    </div>
</div>

@code {
    MemberModel<Result, Member> Model { get; set; }
    CustomizationSettingsClient CustomSettings { get; set; }
    FeatureSettings Features { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await httpClient.GetFromJsonAsync<MemberModel<Result, Member>>("api/Account/Activities");
        if (Model.HasError)
        {
            navigationManager.NavigateTo($"Home/Error/{Model.Message}");
        }
        CustomSettings = await httpClient.GetFromJsonAsync<CustomizationSettingsClient>("api/Account/GetCustomSettings");
        Features = await httpClient.GetFromJsonAsync<FeatureSettings>("api/Account/getSettings");

        StateHasChanged();
    }

    private string GetRowColor(HistoryEntry entry)
    {
        switch (entry.Type)
        {
            case HistoryType.ChallengeSubmission:
                if (!CustomSettings.Results.TryGetValue(entry.Result?.ToString() ?? string.Empty, out var resultConfig))
                {
                    resultConfig = CustomSettings.Results["Undefined"];
                }
                return $"#{resultConfig.Color}";
            case HistoryType.SubmissionRated:
                return "#ddffdd";
            case HistoryType.SubmissionNowFailing:
                return "#f08080";
            case HistoryType.ReviewAvailable:
                return "#f08080";
            default:
                return null;
        }
    }

    private string GetResultValue(HistoryEntry entry)
    {
        switch (entry.Type)
        {
            case HistoryType.ChallengeSubmission:
                if (entry.Result is null || !CustomSettings.Results.TryGetValue(entry.Result.ToString(), out var resultConfig))
                {
                    resultConfig = CustomSettings.Results["Undefined"];
                }
                return resultConfig.Description;
            case HistoryType.ReviewAvailable:
                return "Ausstehendes Review";
            case HistoryType.SubmissionRated:
                return "Reviewergebnis verfügbar";
            case HistoryType.SubmissionNowFailing:
                return "Bisher laufende Einreichung schlägt nun fehl (=Aufgabenänderung)";
            default:
                throw new ArgumentOutOfRangeException(nameof(entry));
        }
    }

}
